package org.coonrapidsfree.obs.two;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.Robot;
import java.awt.event.KeyEvent;
import java.awt.event.MouseEvent;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Comparator;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Pattern;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.SwingUtilities;
import net.twasi.obsremotejava.OBSRemoteController;
import net.twasi.obsremotejava.callbacks.Callback;
import net.twasi.obsremotejava.events.responses.SwitchScenesResponse;
import net.twasi.obsremotejava.requests.GetCurrentScene.GetCurrentSceneResponse;
import net.twasi.obsremotejava.requests.SetCurrentScene.SetCurrentSceneResponse;
import net.twasi.obsremotejava.requests.SetStudioModeEnabled.SetStudioModeEnabledResponse;
import net.twasi.obsremotejava.requests.SetTransitionDuration.SetTransitionDurationResponse;
import net.twasi.obsremotejava.requests.StartRecording.StartRecordingResponse;
import net.twasi.obsremotejava.requests.StartStreaming.StartStreamingResponse;
import net.twasi.obsremotejava.requests.StopRecording.StopRecordingResponse;
import net.twasi.obsremotejava.requests.StopStreaming.StopStreamingResponse;
import org.coonrapidsfree.obs.ImageUtilities;
import org.coonrapidsfree.obs.SlotPanel;
import org.coonrapidsfree.obs.SlideState;
import org.coonrapidsfree.obs.shottype.ShotTypeEnum;
import org.coonrapidsfree.util.ImageCreator;

public class ObsAutomationTwo extends javax.swing.JFrame {

    public static String firstScene = "Cam 1 1944 1,1";
    public String firstSceneLabel = "<html><body><%SCENE%> will be automatically pressed.<br/>after 2 seconds -CREF lower third will automatically be pressed.<br/>after 10 seconds -CREF lower thrid will automatically turn off.";

    public static Object getCurrentScene() {
        return currentScene;
    }
    private boolean switchToSlides;

    /**
     * Creates new form ObsAutomationTwo
     */
    public ObsAutomationTwo() {
        initComponents();
        postInitComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        helperDialog = new javax.swing.JDialog();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        worshipSetCountDownDialog = new javax.swing.JDialog();
        jPanel20 = new javax.swing.JPanel();
        countDownCancelButton = new javax.swing.JButton();
        jPanel21 = new javax.swing.JPanel();
        countDownLabel = new javax.swing.JLabel();
        jPanel22 = new javax.swing.JPanel();
        jLabel15 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        autopilotDialog = new javax.swing.JDialog();
        jScrollPane1 = new javax.swing.JScrollPane();
        jPanel27 = new javax.swing.JPanel();
        jPanel28 = new javax.swing.JPanel();
        programPanel = new javax.swing.JPanel();
        autopilotProgramLabel = new javax.swing.JLabel();
        autopilotProgramLabel1 = new javax.swing.JLabel();
        slot1Panel = new javax.swing.JPanel();
        jPanel36 = new javax.swing.JPanel();
        autopilotSlot1Label = new javax.swing.JLabel();
        autopilotSlot1Label1 = new javax.swing.JLabel();
        jPanel39 = new javax.swing.JPanel();
        slot1Box = new javax.swing.JCheckBox();
        jLabel20 = new javax.swing.JLabel();
        slot1Slider = new javax.swing.JSlider();
        jButton2 = new javax.swing.JButton();
        slot3Panel = new javax.swing.JPanel();
        jPanel37 = new javax.swing.JPanel();
        autopilotSlot3Label = new javax.swing.JLabel();
        autopilotSlot3Label1 = new javax.swing.JLabel();
        jPanel40 = new javax.swing.JPanel();
        slot3Box = new javax.swing.JCheckBox();
        jLabel18 = new javax.swing.JLabel();
        slot3Slider = new javax.swing.JSlider();
        jButton3 = new javax.swing.JButton();
        slot4Panel = new javax.swing.JPanel();
        jPanel38 = new javax.swing.JPanel();
        autopilotSlot4Label = new javax.swing.JLabel();
        autopilotSlot4Label1 = new javax.swing.JLabel();
        jPanel41 = new javax.swing.JPanel();
        slot4Box = new javax.swing.JCheckBox();
        jLabel19 = new javax.swing.JLabel();
        slot4Slider = new javax.swing.JSlider();
        jButton6 = new javax.swing.JButton();
        autoPilotMessagePanel = new javax.swing.JPanel();
        autoPilotUpdatePanel = new javax.swing.JPanel();
        jPanel29 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        slideCountdownLabel = new javax.swing.JLabel();
        jPanel30 = new javax.swing.JPanel();
        jPanel35 = new javax.swing.JPanel();
        jPanel31 = new javax.swing.JPanel();
        jPanel42 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        multiplierLabel = new javax.swing.JLabel();
        jPanel34 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        sensitivityLabel = new javax.swing.JLabel();
        jPanel32 = new javax.swing.JPanel();
        slideMultiplierSlider = new javax.swing.JSlider();
        sensitivitySlider = new javax.swing.JSlider();
        jSplitPane1 = new javax.swing.JSplitPane();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        pickerPanel = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jPanel44 = new javax.swing.JPanel();
        jPanel43 = new javax.swing.JPanel();
        autoPilotControlPanelButton = new javax.swing.JButton();
        autopilotButton = new javax.swing.JButton();
        jPanel15 = new javax.swing.JPanel();
        oneButton = new javax.swing.JButton();
        twoButton = new javax.swing.JButton();
        jPanel12 = new javax.swing.JPanel();
        jPanel9 = new javax.swing.JPanel();
        welcomeButton = new javax.swing.JButton();
        welcomeButton2 = new javax.swing.JButton();
        welcomeButton1 = new javax.swing.JButton();
        goodByeButton = new javax.swing.JButton();
        jPanel10 = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();
        jPanel45 = new javax.swing.JPanel();
        jButton5 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        slidesPanel = new javax.swing.JPanel();
        fullSlidesButton = new javax.swing.JButton();
        jPanel11 = new javax.swing.JPanel();
        jPanel33 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        overlaySwitchButton = new javax.swing.JButton();
        overlaySwitchButton1 = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        currentOverlayLabel = new javax.swing.JLabel();
        filler2 = new javax.swing.Box.Filler(new java.awt.Dimension(60, 0), new java.awt.Dimension(60, 0), new java.awt.Dimension(60, 32767));
        jPanel23 = new javax.swing.JPanel();
        jPanel13 = new javax.swing.JPanel();
        jPanel14 = new javax.swing.JPanel();
        fadeSlider = new javax.swing.JSlider();
        moveSlider = new javax.swing.JSlider();
        jPanel16 = new javax.swing.JPanel();
        jPanel25 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        fadeLabel = new javax.swing.JLabel();
        jPanel26 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        moveLabel = new javax.swing.JLabel();
        jPanel24 = new javax.swing.JPanel();
        jPanel19 = new javax.swing.JPanel();
        jPanel17 = new javax.swing.JPanel();
        streamPrepHelperLabel = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jPanel18 = new javax.swing.JPanel();
        prepHelperButton = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        worshipCountdownTimer = new javax.swing.JTextField();
        startCountdownButton = new javax.swing.JButton();
        jLabel16 = new javax.swing.JLabel();
        startStreamButton = new javax.swing.JButton();

        helperDialog.addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                helperDialogWindowClosing(evt);
            }
        });
        helperDialog.getContentPane().setLayout(new java.awt.GridLayout(0, 1));

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel10.setText("Go to youtube.com in Chrome. Click Create (Looks like a video camera with a + on it).  Select Go Live.");
        helperDialog.getContentPane().add(jLabel10);

        jLabel11.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel11.setText("Click Edit.  Update the title and description to the sermon title.");
        helperDialog.getContentPane().add(jLabel11);

        jLabel23.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel23.setText("Click Edit.  Update the title and description to the sermon title.  Minimize Chrome.");
        helperDialog.getContentPane().add(jLabel23);

        jLabel12.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        helperDialog.getContentPane().add(jLabel12);

        jLabel22.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel22.setForeground(new java.awt.Color(153, 0, 0));
        jLabel22.setText("Press record on the camera.");
        helperDialog.getContentPane().add(jLabel22);

        jLabel13.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel13.setText("In OBS, Select the View menu, Select Multiview (Windowed), and drag the resulting popup window to the upper left hand corner of the screen.");
        helperDialog.getContentPane().add(jLabel13);

        jLabel14.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel14.setText("Close this Dialog");
        helperDialog.getContentPane().add(jLabel14);

        worshipSetCountDownDialog.setUndecorated(true);

        countDownCancelButton.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        countDownCancelButton.setText("Cancel");
        countDownCancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                countDownCancelButtonActionPerformed(evt);
            }
        });
        jPanel20.add(countDownCancelButton);

        worshipSetCountDownDialog.getContentPane().add(jPanel20, java.awt.BorderLayout.SOUTH);

        countDownLabel.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        countDownLabel.setText("jLabel15");
        jPanel21.add(countDownLabel);

        worshipSetCountDownDialog.getContentPane().add(jPanel21, java.awt.BorderLayout.NORTH);

        jPanel22.setLayout(new java.awt.BorderLayout());

        jLabel15.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel15.setText("<html><body><font color=orange><%SCENE%></font> will be automatically pressed.<br/>after 2 seconds -CREF lower third will automatically be pressed.<br/>after 10 seconds -CREF lower thrid will automatically turn off.");
        jPanel22.add(jLabel15, java.awt.BorderLayout.CENTER);

        jLabel21.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel21.setForeground(new java.awt.Color(153, 0, 51));
        jPanel22.add(jLabel21, java.awt.BorderLayout.PAGE_START);

        worshipSetCountDownDialog.getContentPane().add(jPanel22, java.awt.BorderLayout.CENTER);

        autopilotDialog.setAlwaysOnTop(true);
        autopilotDialog.setUndecorated(true);

        jPanel27.setLayout(new java.awt.BorderLayout());

        jPanel28.setLayout(new java.awt.GridLayout(0, 1));

        programPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Program:"));
        programPanel.setLayout(new java.awt.GridLayout(1, 0));
        programPanel.add(autopilotProgramLabel);
        programPanel.add(autopilotProgramLabel1);

        jPanel28.add(programPanel);

        slot1Panel.setBorder(javax.swing.BorderFactory.createTitledBorder("Slot 1:"));
        slot1Panel.setLayout(new java.awt.BorderLayout());

        jPanel36.setLayout(new java.awt.GridLayout(1, 0));
        jPanel36.add(autopilotSlot1Label);
        jPanel36.add(autopilotSlot1Label1);

        slot1Panel.add(jPanel36, java.awt.BorderLayout.CENTER);

        jPanel39.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 5, 0));

        slot1Box.setSelected(true);
        slot1Box.setText("Use Slot");
        slot1Box.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        jPanel39.add(slot1Box);

        jLabel20.setText("Threshold:");
        jPanel39.add(jLabel20);

        slot1Slider.setMajorTickSpacing(1000);
        slot1Slider.setMaximum(3000);
        slot1Slider.setPaintTicks(true);
        slot1Slider.setValue(300);
        jPanel39.add(slot1Slider);

        jButton2.setText("TIGHT");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jPanel39.add(jButton2);

        slot1Panel.add(jPanel39, java.awt.BorderLayout.NORTH);

        jPanel28.add(slot1Panel);

        slot3Panel.setBorder(javax.swing.BorderFactory.createTitledBorder("Slot 3:"));
        slot3Panel.setLayout(new java.awt.BorderLayout());

        jPanel37.setLayout(new java.awt.GridLayout(1, 0));
        jPanel37.add(autopilotSlot3Label);
        jPanel37.add(autopilotSlot3Label1);

        slot3Panel.add(jPanel37, java.awt.BorderLayout.CENTER);

        jPanel40.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 5, 0));

        slot3Box.setSelected(true);
        slot3Box.setText("Use Slot");
        slot3Box.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        jPanel40.add(slot3Box);

        jLabel18.setText("Threshold:");
        jPanel40.add(jLabel18);

        slot3Slider.setMajorTickSpacing(1000);
        slot3Slider.setMaximum(3000);
        slot3Slider.setPaintTicks(true);
        slot3Slider.setValue(300);
        jPanel40.add(slot3Slider);

        jButton3.setText("TIGHT");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        jPanel40.add(jButton3);

        slot3Panel.add(jPanel40, java.awt.BorderLayout.NORTH);

        jPanel28.add(slot3Panel);

        slot4Panel.setBorder(javax.swing.BorderFactory.createTitledBorder("Slot 4:"));
        slot4Panel.setLayout(new java.awt.BorderLayout());

        jPanel38.setLayout(new java.awt.GridLayout(1, 0));
        jPanel38.add(autopilotSlot4Label);
        jPanel38.add(autopilotSlot4Label1);

        slot4Panel.add(jPanel38, java.awt.BorderLayout.CENTER);

        jPanel41.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 5, 0));

        slot4Box.setText("Use Slot");
        slot4Box.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        jPanel41.add(slot4Box);

        jLabel19.setText("Threshold:");
        jPanel41.add(jLabel19);

        slot4Slider.setMajorTickSpacing(1000);
        slot4Slider.setMaximum(3000);
        slot4Slider.setPaintTicks(true);
        slot4Slider.setValue(300);
        jPanel41.add(slot4Slider);

        jButton6.setText("TIGHT");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });
        jPanel41.add(jButton6);

        slot4Panel.add(jPanel41, java.awt.BorderLayout.NORTH);

        jPanel28.add(slot4Panel);

        jPanel27.add(jPanel28, java.awt.BorderLayout.CENTER);

        jScrollPane1.setViewportView(jPanel27);

        autopilotDialog.getContentPane().add(jScrollPane1, java.awt.BorderLayout.CENTER);

        autoPilotMessagePanel.setLayout(new java.awt.GridLayout(1, 0));
        autopilotDialog.getContentPane().add(autoPilotMessagePanel, java.awt.BorderLayout.WEST);

        autoPilotUpdatePanel.setLayout(new java.awt.BorderLayout());

        jLabel4.setText("Slide Countdown:");
        jPanel29.add(jLabel4);

        slideCountdownLabel.setText("0");
        jPanel29.add(slideCountdownLabel);

        autoPilotUpdatePanel.add(jPanel29, java.awt.BorderLayout.NORTH);

        jPanel30.setLayout(new java.awt.BorderLayout());

        jPanel35.setLayout(new java.awt.BorderLayout());

        jPanel31.setLayout(new java.awt.GridLayout(0, 1));

        jPanel42.setLayout(new java.awt.GridLayout(0, 1));

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel1.setText("Slide Multiplier:");
        jPanel42.add(jLabel1);

        multiplierLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jPanel42.add(multiplierLabel);

        jPanel31.add(jPanel42);

        jPanel34.setBackground(new java.awt.Color(204, 204, 204));
        jPanel34.setLayout(new java.awt.GridLayout(0, 1));

        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel5.setText("Sensitivity:");
        jPanel34.add(jLabel5);

        sensitivityLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jPanel34.add(sensitivityLabel);

        jPanel31.add(jPanel34);

        jPanel35.add(jPanel31, java.awt.BorderLayout.WEST);

        jPanel32.setLayout(new java.awt.GridLayout(0, 1));

        slideMultiplierSlider.setMajorTickSpacing(500);
        slideMultiplierSlider.setMaximum(5000);
        slideMultiplierSlider.setMinimum(500);
        slideMultiplierSlider.setPaintTicks(true);
        slideMultiplierSlider.setToolTipText("");
        slideMultiplierSlider.setValue(2000);
        slideMultiplierSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                slideMultiplierSliderStateChanged(evt);
            }
        });
        jPanel32.add(slideMultiplierSlider);

        sensitivitySlider.setMajorTickSpacing(10);
        sensitivitySlider.setMaximum(120);
        sensitivitySlider.setMinimum(1);
        sensitivitySlider.setPaintTicks(true);
        sensitivitySlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sensitivitySliderStateChanged(evt);
            }
        });
        jPanel32.add(sensitivitySlider);

        jPanel35.add(jPanel32, java.awt.BorderLayout.CENTER);

        jPanel30.add(jPanel35, java.awt.BorderLayout.NORTH);

        autoPilotUpdatePanel.add(jPanel30, java.awt.BorderLayout.CENTER);

        autopilotDialog.getContentPane().add(autoPilotUpdatePanel, java.awt.BorderLayout.EAST);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowFocusListener(new java.awt.event.WindowFocusListener() {
            public void windowGainedFocus(java.awt.event.WindowEvent evt) {
            }
            public void windowLostFocus(java.awt.event.WindowEvent evt) {
                formWindowLostFocus(evt);
            }
        });

        jPanel1.setLayout(new java.awt.BorderLayout());
        jSplitPane1.setLeftComponent(jPanel1);

        jPanel2.setLayout(new java.awt.BorderLayout());

        jPanel6.setLayout(new java.awt.BorderLayout());

        pickerPanel.setLayout(new java.awt.GridLayout(0, 1, 0, 2));
        jPanel6.add(pickerPanel, java.awt.BorderLayout.NORTH);

        jPanel2.add(jPanel6, java.awt.BorderLayout.WEST);

        jPanel7.setLayout(new java.awt.BorderLayout());

        jPanel3.setLayout(new javax.swing.BoxLayout(jPanel3, javax.swing.BoxLayout.PAGE_AXIS));

        jPanel43.setBorder(javax.swing.BorderFactory.createTitledBorder("Auto-Pilot"));

        autoPilotControlPanelButton.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        autoPilotControlPanelButton.setText("Control Panel");
        autoPilotControlPanelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                autoPilotControlPanelButtonActionPerformed(evt);
            }
        });
        jPanel43.add(autoPilotControlPanelButton);

        autopilotButton.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        autopilotButton.setText("Start");
        autopilotButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                autopilotButtonActionPerformed(evt);
            }
        });
        jPanel43.add(autopilotButton);

        jPanel44.add(jPanel43);

        jPanel15.setBorder(javax.swing.BorderFactory.createTitledBorder("Lower Thirds Toggles (Hotkey Enabled)"));

        oneButton.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        oneButton.setText("Pastor");
        oneButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                oneButtonActionPerformed(evt);
            }
        });
        jPanel15.add(oneButton);

        twoButton.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        twoButton.setText("CREF");
        twoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                twoButtonActionPerformed(evt);
            }
        });
        jPanel15.add(twoButton);

        jPanel44.add(jPanel15);

        jPanel3.add(jPanel44);

        jPanel9.setBorder(javax.swing.BorderFactory.createTitledBorder("Scenes with no audio"));

        welcomeButton.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        welcomeButton.setText("Hi");
        welcomeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                welcomeButtonActionPerformed(evt);
            }
        });
        jPanel9.add(welcomeButton);

        welcomeButton2.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        welcomeButton2.setText("Slides");
        welcomeButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                welcomeButton2ActionPerformed(evt);
            }
        });
        jPanel9.add(welcomeButton2);

        welcomeButton1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        welcomeButton1.setForeground(new java.awt.Color(0, 102, 204));
        welcomeButton1.setText("BRB");
        welcomeButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                welcomeButton1ActionPerformed(evt);
            }
        });
        jPanel9.add(welcomeButton1);

        goodByeButton.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        goodByeButton.setForeground(new java.awt.Color(204, 0, 51));
        goodByeButton.setText("Bye");
        goodByeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                goodByeButtonActionPerformed(evt);
            }
        });
        jPanel9.add(goodByeButton);

        jPanel12.add(jPanel9);

        jPanel3.add(jPanel12);

        jPanel8.setBorder(javax.swing.BorderFactory.createTitledBorder("Slides:"));

        jPanel45.setLayout(new java.awt.GridLayout(0, 1, 0, 7));

        jButton5.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jButton5.setText("Blank");
        jButton5.setToolTipText("Mark a slide as blank.");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        jPanel45.add(jButton5);

        jButton4.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jButton4.setText("Auto");
        jButton4.setToolTipText("Auto Switch To New Slides");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        jPanel45.add(jButton4);

        jPanel8.add(jPanel45);

        slidesPanel.setBackground(new java.awt.Color(51, 153, 0));
        slidesPanel.setOpaque(false);

        fullSlidesButton.setForeground(new java.awt.Color(51, 102, 0));
        fullSlidesButton.setText("Full Screen Slides");
        fullSlidesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fullSlidesButtonActionPerformed(evt);
            }
        });
        slidesPanel.add(fullSlidesButton);

        jPanel8.add(slidesPanel);

        jPanel10.add(jPanel8);

        jPanel3.add(jPanel10);

        jPanel33.setBorder(javax.swing.BorderFactory.createTitledBorder("Switch Overlay:"));
        jPanel33.setLayout(new java.awt.BorderLayout());

        jPanel4.setLayout(new java.awt.GridLayout(0, 1));

        overlaySwitchButton.setText("Slide Combo");
        overlaySwitchButton.setToolTipText("Slide Combo");
        overlaySwitchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                overlaySwitchButtonActionPerformed(evt);
            }
        });
        jPanel4.add(overlaySwitchButton);

        overlaySwitchButton1.setText("No Slides");
        overlaySwitchButton1.setToolTipText("No Slides");
        overlaySwitchButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                overlaySwitchButton1ActionPerformed(evt);
            }
        });
        jPanel4.add(overlaySwitchButton1);

        jPanel33.add(jPanel4, java.awt.BorderLayout.CENTER);

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder("Current:"));
        jPanel5.setLayout(new java.awt.BorderLayout());
        jPanel5.add(currentOverlayLabel, java.awt.BorderLayout.CENTER);
        jPanel5.add(filler2, java.awt.BorderLayout.PAGE_START);

        jPanel33.add(jPanel5, java.awt.BorderLayout.EAST);

        jPanel11.add(jPanel33);

        jPanel3.add(jPanel11);

        jPanel23.setLayout(new java.awt.BorderLayout());

        jPanel13.setLayout(new java.awt.BorderLayout());

        jPanel14.setLayout(new java.awt.GridLayout(0, 1));

        fadeSlider.setMajorTickSpacing(1000);
        fadeSlider.setMaximum(3000);
        fadeSlider.setMinimum(100);
        fadeSlider.setPaintTicks(true);
        fadeSlider.setToolTipText("");
        fadeSlider.setValue(1500);
        fadeSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                fadeSliderStateChanged(evt);
            }
        });
        jPanel14.add(fadeSlider);

        moveSlider.setMajorTickSpacing(1000);
        moveSlider.setMaximum(15000);
        moveSlider.setMinimum(1500);
        moveSlider.setPaintTicks(true);
        moveSlider.setToolTipText("");
        moveSlider.setValue(5000);
        moveSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                moveSliderStateChanged(evt);
            }
        });
        jPanel14.add(moveSlider);

        jPanel13.add(jPanel14, java.awt.BorderLayout.CENTER);

        jPanel16.setLayout(new java.awt.GridLayout(0, 1));

        jPanel25.setLayout(new java.awt.GridLayout(0, 1));

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel2.setText("Fade Duration:");
        jPanel25.add(jLabel2);

        fadeLabel.setText("jLabel1");
        jPanel25.add(fadeLabel);

        jPanel16.add(jPanel25);

        jPanel26.setLayout(new java.awt.GridLayout(0, 1));

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel3.setText("Move Duration:");
        jPanel26.add(jLabel3);

        moveLabel.setText("jLabel5");
        jPanel26.add(moveLabel);

        jPanel16.add(jPanel26);

        jPanel13.add(jPanel16, java.awt.BorderLayout.WEST);

        jPanel23.add(jPanel13, java.awt.BorderLayout.NORTH);

        jPanel3.add(jPanel23);

        jPanel19.setLayout(new java.awt.BorderLayout());

        jPanel17.setLayout(new java.awt.GridLayout(0, 1, 0, 3));

        streamPrepHelperLabel.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        streamPrepHelperLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        streamPrepHelperLabel.setText("Stream Prep Helper (PRESS THIS FIRST):");
        streamPrepHelperLabel.setToolTipText("Don't ask why, just do it!");
        jPanel17.add(streamPrepHelperLabel);

        jLabel17.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel17.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel17.setText("Set Scene to Start Worship Set:");
        jPanel17.add(jLabel17);

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel6.setText("Countdown Timer (seconds):");
        jPanel17.add(jLabel6);

        jLabel7.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel7.setText("Start Countdown Worship Set:");
        jPanel17.add(jLabel7);

        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jPanel17.add(jLabel8);

        jLabel9.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel9.setText("Stream and Record:");
        jPanel17.add(jLabel9);

        jPanel19.add(jPanel17, java.awt.BorderLayout.WEST);

        jPanel18.setLayout(new java.awt.GridLayout(0, 1, 0, 3));

        prepHelperButton.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        prepHelperButton.setText("Helper");
        prepHelperButton.setToolTipText("<html><body>Switch to studio mode and back (fixes elgato audio problems)<br/>Open YouTube Studio<br/>");
        prepHelperButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                prepHelperButtonActionPerformed(evt);
            }
        });
        jPanel18.add(prepHelperButton);

        jButton1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jButton1.setText("Set");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel18.add(jButton1);

        worshipCountdownTimer.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        worshipCountdownTimer.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        worshipCountdownTimer.setText("120");
        jPanel18.add(worshipCountdownTimer);

        startCountdownButton.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        startCountdownButton.setText("Start");
        startCountdownButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startCountdownButtonActionPerformed(evt);
            }
        });
        jPanel18.add(startCountdownButton);

        jLabel16.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jPanel18.add(jLabel16);

        startStreamButton.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        startStreamButton.setText("Start");
        startStreamButton.setEnabled(false);
        startStreamButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startStreamButtonActionPerformed(evt);
            }
        });
        jPanel18.add(startStreamButton);

        jPanel19.add(jPanel18, java.awt.BorderLayout.EAST);

        jPanel24.add(jPanel19);

        jPanel3.add(jPanel24);

        jPanel7.add(jPanel3, java.awt.BorderLayout.CENTER);

        jPanel2.add(jPanel7, java.awt.BorderLayout.CENTER);

        jSplitPane1.setRightComponent(jPanel2);

        getContentPane().add(jSplitPane1, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private SlideState slideState = SlideState.NO_SLIDE;
    private void overlaySwitchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_overlaySwitchButtonActionPerformed
        if (!SlideState.SLIDE_COMBO.equals(slideState)) {
            setSlideState(SlideState.SLIDE_COMBO);
        } else {
//            try {
//                int index = firstSlotCamOverlays.indexOf(firstSlotCurrentOverlay);
//                if (index >= firstSlotSlideOverlays.size()) {
//                    index = firstSlotSlideOverlays.size() - 1;
//                }
//                firstSlotCurrentOverlay = firstSlotSlideOverlays.get(index);
//                Point p = sceneToMidpointMap.get(currentScene);
//
//                determinePotentialScene(p.x, p.y, firstSlotOverlayMap.get(firstSlotCurrentOverlay));
//                changeToScene(potentialScene);
//            } catch (Exception e) {
//                System.out.println(e.getMessage());
//            }
        }
    }//GEN-LAST:event_overlaySwitchButtonActionPerformed

    private void overlaySwitchButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_overlaySwitchButton1ActionPerformed
        if (!SlideState.NO_SLIDE.equals(slideState)) {
            setSlideState(SlideState.NO_SLIDE);
            slideSwitchOffTime = 0;
        } else {
//            try {
//                int index = firstSlotSlideOverlays.indexOf(firstSlotCurrentOverlay);
//                if (index >= firstSlotCamOverlays.size()) {
//                    index = firstSlotCamOverlays.size() - 1;
//                }
//                firstSlotCurrentOverlay = firstSlotCamOverlays.get(index);
//                Point p = sceneToMidpointMap.get(currentScene);
//
//                determinePotentialScene(p.x, p.y, firstSlotOverlayMap.get(firstSlotCurrentOverlay));
//                changeToScene(potentialScene);
//            } catch (Exception e) {
//                System.out.println(e.getMessage());
//            }
        }
    }//GEN-LAST:event_overlaySwitchButton1ActionPerformed
    boolean cancelAutoSlideSwitch = true;
    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        cancelAutoSlideSwitch = !cancelAutoSlideSwitch;
        if (cancelAutoSlideSwitch) {
            jButton4.setForeground(Color.RED);
        } else {
            jButton4.setForeground(Color.GREEN);
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void cancelAutoSlideSwitch() {
        if (!cancelAutoSlideSwitch) {
            cancelAutoSlideSwitch = true;
            jButton4.setForeground(Color.RED);
        }
    }

    private void cancelAutoPilot() {
        if (!cancelAutopilot) {
            cancelAutopilot = true;
            autoPilotControlPanelButton.setForeground(Color.RED);
            autopilotDialog.setVisible(false);
        }
        if (autoPilotStarted) {
            autoPilotStarted = false;
            autopilotButton.setForeground(Color.RED);
        }
    }

    private void fullSlidesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fullSlidesButtonActionPerformed
        changeToScene("Slides With Overlay");
        slidesPanel.setOpaque(false);
    }//GEN-LAST:event_fullSlidesButtonActionPerformed

    private void formWindowLostFocus(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowLostFocus
        if (!cancelAutoSlideSwitch) {
            cancelAutoSlideSwitch();
            cancelAutoPilot();
        }
    }//GEN-LAST:event_formWindowLostFocus

    private void oneButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_oneButtonActionPerformed
        //        robot.keyPress(KeyEvent.VK_ALT);
        //        robot.keyPress(KeyEvent.VK_TAB);
        //        robot.keyRelease(KeyEvent.VK_TAB);
        //        robot.keyRelease(KeyEvent.VK_ALT);

        robot.mouseMove(10, 100);
        robot.mousePress(MouseEvent.BUTTON1_MASK);
        robot.mouseRelease(MouseEvent.BUTTON1_MASK);

        robot.delay(500);

        robot.keyPress(KeyEvent.VK_CONTROL);
        robot.keyPress(KeyEvent.VK_NUMPAD1);
        robot.keyRelease(KeyEvent.VK_NUMPAD1);
        robot.keyRelease(KeyEvent.VK_CONTROL);

        robot.delay(500);

        robot.keyPress(KeyEvent.VK_ALT);
        robot.keyPress(KeyEvent.VK_TAB);
        robot.keyRelease(KeyEvent.VK_TAB);
        robot.keyRelease(KeyEvent.VK_ALT);

        Point p = ((JButton) evt.getSource()).getLocationOnScreen();
        robot.mouseMove(p.x, p.y);
    }//GEN-LAST:event_oneButtonActionPerformed

    private void twoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_twoButtonActionPerformed
        //        robot.keyPress(KeyEvent.VK_ALT);
        //        robot.keyPress(KeyEvent.VK_TAB);
        //        robot.keyRelease(KeyEvent.VK_TAB);
        //        robot.keyRelease(KeyEvent.VK_ALT);

        robot.mouseMove(10, 100);
        robot.mousePress(MouseEvent.BUTTON1_MASK);
        robot.mouseRelease(MouseEvent.BUTTON1_MASK);

        robot.delay(500);

        robot.keyPress(KeyEvent.VK_CONTROL);
        robot.keyPress(KeyEvent.VK_NUMPAD2);
        robot.keyRelease(KeyEvent.VK_NUMPAD2);
        robot.keyRelease(KeyEvent.VK_CONTROL);

        robot.delay(500);

        robot.keyPress(KeyEvent.VK_ALT);
        robot.keyPress(KeyEvent.VK_TAB);
        robot.keyRelease(KeyEvent.VK_TAB);
        robot.keyRelease(KeyEvent.VK_ALT);

        Point p = ((JButton) evt.getSource()).getLocationOnScreen();
        robot.mouseMove(p.x, p.y);
    }//GEN-LAST:event_twoButtonActionPerformed

    private void welcomeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_welcomeButtonActionPerformed
        changeToScene("Intro (No Audio Broadcast)");
    }//GEN-LAST:event_welcomeButtonActionPerformed

    private void welcomeButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_welcomeButton2ActionPerformed
        changeToScene("Slides (No Audio Broadcast)");
    }//GEN-LAST:event_welcomeButton2ActionPerformed

    private void welcomeButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_welcomeButton1ActionPerformed
        changeToScene("For CREF Only (No Audio Broadcast)");
    }//GEN-LAST:event_welcomeButton1ActionPerformed

    private void goodByeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_goodByeButtonActionPerformed
        cancelAutoSlideSwitch();
        cancelAutoPilot();
        changeToScene("Ending (No Audio Broadcast)");
    }//GEN-LAST:event_goodByeButtonActionPerformed

    private void helperDialogWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_helperDialogWindowClosing
        requestFocus();
    }//GEN-LAST:event_helperDialogWindowClosing

    private void countDownCancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_countDownCancelButtonActionPerformed
        cancelWorshipSetTimer = true;
    }//GEN-LAST:event_countDownCancelButtonActionPerformed

    private void prepHelperButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_prepHelperButtonActionPerformed
        prepHelperButton.setVisible(false);
        System.out.println("Switch to Studio Mode and Back");
        Callback<SetStudioModeEnabledResponse> cb = new Callback<SetStudioModeEnabledResponse>() {
            @Override
            public void run(SetStudioModeEnabledResponse rt) {
                if (rt.getError() != null) {
                    System.out.println(rt.getError());
                }
            }
        };
        controller.setStudioModeEnabled(false, cb);
        try {
            Thread.sleep(500);
        } catch (InterruptedException ex) {
            ex.printStackTrace();
        }
        controller.setStudioModeEnabled(true, cb);

        helperDialog.setVisible(true);
        helperDialog.pack();
        helperDialog.setAlwaysOnTop(true);
        helperDialog.setLocation(100, 100);

        welcomeButton.doClick();
        startStreamButton.setEnabled(true);
    }//GEN-LAST:event_prepHelperButtonActionPerformed

    private void startCountdownButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startCountdownButtonActionPerformed
        jLabel15.setText(firstSceneLabel.replaceAll(Pattern.quote("<%SCENE%>"), firstScene));

        firstSlotPanel.setInitialScene(firstScene);
        thirdSlotPanel.setInitialScene(firstScene);
        fourthSlotPanel.setInitialScene(firstScene);
        SlotPanel.setShowInitialScene(true);

        startCountdownButton.setEnabled(false);
        worshipSetCountDownDialog.setVisible(true);
        worshipSetCountDownDialog.pack();

        if (startStreamButton.getText().equals("Start")) {
            jLabel21.setText("Don't forget to start recording!!!");
            worshipSetCountDownDialog.pack();
            Thread t = new Thread(new Runnable() {
                @Override
                public void run() {
                    for (int i = 0; i < 6; i++) {
                        SwingUtilities.invokeLater(new Runnable() {
                            @Override
                            public void run() {
                                startStreamButton.setForeground(new Color(0, 150, 0));
                            }
                        });

                        try {
                            Thread.sleep(1000);
                        } catch (InterruptedException ex) {
                            ex.printStackTrace();
                        }
                        SwingUtilities.invokeLater(new Runnable() {
                            @Override
                            public void run() {
                                startStreamButton.setForeground(Color.BLACK);
                            }
                        });

                        try {
                            Thread.sleep(500);
                        } catch (InterruptedException ex) {
                            ex.printStackTrace();
                        }
                    }
                }
            });
            t.start();
        }

        try {
            worshipSetTimerLength = Integer.valueOf(worshipCountdownTimer.getText());

            cancelWorshipSetTimer = false;

            Thread t = new Thread(new Runnable() {
                @Override
                public void run() {
                    for (; worshipSetTimerLength > 0; worshipSetTimerLength--) {
                        countDownLabel.setText(worshipSetTimerLength + "");
                        try {
                            Thread.sleep(990);
                        } catch (InterruptedException ex) {
                            ex.printStackTrace();
                        }
                        if (cancelWorshipSetTimer) {
                            break;
                        }
                    }

                    SlotPanel.setShowInitialScene(false);
                    worshipSetCountDownDialog.setVisible(false);
                    startCountdownButton.setEnabled(true);

                    if (!cancelWorshipSetTimer) {
                        controller.setTransitionDuration(500, responseCallback);
                        controller.changeSceneWithTransition("Slides With Overlay", "Cut", callback);
                        try {
                            Thread.sleep(600);
                        } catch (InterruptedException ex) {
                            ex.printStackTrace();
                        }

                        setSlideState(SlideState.NO_SLIDE);
                        controller.setTransitionDuration(1500, responseCallback);
                        System.out.println(firstScene);
                        controller.changeSceneWithTransition(firstScene, "Fade", callback);

                        try {
                            Thread.sleep(2000);
                        } catch (InterruptedException ex) {
                            ex.printStackTrace();
                        }

                        twoButton.doClick();
                        twoButton.setEnabled(false);
                        try {
                            Thread.sleep(10000);
                        } catch (InterruptedException ex) {
                            ex.printStackTrace();
                        }

                        twoButton.setEnabled(true);
                        twoButton.doClick();
                    }
                }
            });
            t.start();

        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_startCountdownButtonActionPerformed

    private void startStreamButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startStreamButtonActionPerformed
        startStreamButton.setEnabled(false);
        if (startStreamButton.getText().equals("Start")) {
            controller.startRecording(new Callback<StartRecordingResponse>() {
                @Override
                public void run(StartRecordingResponse rt) {
                    if (rt.getError() != null) {
                        System.out.println(rt.getError());
                    }
                }
            });

            controller.startStreaming(new Callback<StartStreamingResponse>() {
                @Override
                public void run(StartStreamingResponse rt) {
                    if (rt.getError() != null) {
                        System.out.println(rt.getError());
                    }
                }
            });

            startStreamButton.setText("Stop");
            startStreamButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/coonrapidsfree/images/record.png")));
        } else {
            controller.stopRecording(new Callback<StopRecordingResponse>() {
                @Override
                public void run(StopRecordingResponse rt) {
                    if (rt.getError() != null) {
                        System.out.println(rt.getError());
                    }
                }
            });

            controller.stopStreaming(new Callback<StopStreamingResponse>() {
                @Override
                public void run(StopStreamingResponse rt) {
                    if (rt.getError() != null) {
                        System.out.println(rt.getError());
                    }
                }
            });
            startStreamButton.setText("Start");
            startStreamButton.setIcon(null);
        }
        startStreamButton.setEnabled(true);
    }//GEN-LAST:event_startStreamButtonActionPerformed

    private void fadeSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_fadeSliderStateChanged
        fadeLabel.setText(fadeSlider.getValue() + " ms");
    }//GEN-LAST:event_fadeSliderStateChanged

    private void moveSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_moveSliderStateChanged
        moveLabel.setText(moveSlider.getValue() + " ms");
    }//GEN-LAST:event_moveSliderStateChanged

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        System.out.println("Setting First Scene " + currentScene);
        firstScene = currentScene;
    }//GEN-LAST:event_jButton1ActionPerformed

    private void autopilotButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_autopilotButtonActionPerformed

    }//GEN-LAST:event_autopilotButtonActionPerformed

    private void sensitivitySliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sensitivitySliderStateChanged
        sensitivityLabel.setText("" + sensitivitySlider.getValue());
    }//GEN-LAST:event_sensitivitySliderStateChanged

    private void slideMultiplierSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_slideMultiplierSliderStateChanged
        multiplierLabel.setText("" + slideMultiplierSlider.getValue());
    }//GEN-LAST:event_slideMultiplierSliderStateChanged

    private void autoPilotControlPanelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_autoPilotControlPanelButtonActionPerformed
        cancelAutopilot = !cancelAutopilot;

        if (cancelAutopilot) {
            autoPilotControlPanelButton.setForeground(Color.RED);
            autopilotDialog.setVisible(false);
            cancelAutoPilot();
        } else {
            autoPilotControlPanelButton.setForeground(Color.GREEN);
            autopilotDialog.setLocation(0, 530);
            autopilotDialog.setSize(new Dimension(960, 480));
            autopilotDialog.setVisible(true);
            Thread t = new Thread(new Runnable() {
                @Override
                public void run() {
                    while (!cancelAutopilot) {
                        if (slideSwitchOffTime != 0) {
                            if (slideSwitchOffTime < System.currentTimeMillis()) {
                                if (slideState.equals(SlideState.FULL_SLIDES)) {
                                    slideSwitchOffTime = System.currentTimeMillis() + ((slideMultiplierSlider.getValue() * diffCount) / 2);
                                    if (autoPilotStarted) {
                                        setSlideState(SlideState.SLIDE_COMBO);
                                        System.out.println("Actually Switch to SLIDE_COMBO");
                                    } else {
                                        System.out.println("Switch to SLIDE_COMBO");
                                    }

                                } else if (slideState.equals(SlideState.SLIDE_COMBO)) {
                                    if (autoPilotStarted) {
                                        setSlideState(SlideState.NO_SLIDE);
                                        System.out.println("Actually Switch to NO_SLIDE");
                                    } else {
                                        System.out.println("Switch to NO_SLIDE");
                                    }
                                    slideSwitchOffTime = 0;
                                }
                            } else {
//                                System.out.println("Countdown:" + ((slideSwitchOffTime - System.currentTimeMillis()) / 1000));
                                slideCountdownLabel.setText("" + ((slideSwitchOffTime - System.currentTimeMillis()) / 1000));
                            }
                        } else {
                            System.out.println("Auto");
                            BufferedImage tempProgramImage = (BufferedImage) ImageUtilities.getImage(robot.createScreenCapture(programRectangle), .5, 0);

                            autopilotProgramLabel.setIcon(new ImageIcon(tempProgramImage));

                            BufferedImage tempSlot1Image = robot.createScreenCapture(slot1ThumbRect);
                            autopilotSlot1Label.setIcon(new ImageIcon(tempSlot1Image));

                            BufferedImage tempSlot3Image = robot.createScreenCapture(slot3ThumbRect);
                            autopilotSlot3Label.setIcon(new ImageIcon(tempSlot3Image));

                            BufferedImage tempSlot4Image = robot.createScreenCapture(slot4ThumbRect);
                            autopilotSlot4Label.setIcon(new ImageIcon(tempSlot4Image));

                            if (prevProgramImage != null) {
                                BufferedImage temp = new BufferedImage(tempProgramImage.getWidth(), tempProgramImage.getHeight(), BufferedImage.TYPE_INT_RGB);
                                Rectangle r = diffImage(tempProgramImage, prevProgramImage, sensitivitySlider.getValue(), 0, temp);
                                if (r != null) {
                                    Graphics2D g2d = (Graphics2D) temp.getGraphics();
                                    g2d.setColor(Color.YELLOW);
                                    g2d.drawRect(r.x, r.y, r.width, r.height);
                                }
                                autopilotProgramLabel1.setIcon(new ImageIcon(temp));
                            }
                            if (prevSlot1Image != null) {
                                if (slot1Box.isSelected()) {
                                    BufferedImage temp = new BufferedImage(tempSlot1Image.getWidth(), tempSlot1Image.getHeight(), BufferedImage.TYPE_INT_RGB);
                                    Rectangle r = diffImage(tempSlot1Image, prevSlot1Image, sensitivitySlider.getValue(), slot1Slider.getValue(), temp);
                                    if (r != null) {
                                        Graphics2D g2d = (Graphics2D) temp.getGraphics();
                                        g2d.setColor(Color.YELLOW);
                                        g2d.drawRect(r.x, r.y, r.width, r.height);
                                        firstSlotPanel.recommendScene(r);
                                    }
                                    autopilotSlot1Label1.setIcon(new ImageIcon(temp));
                                }
                            }
                            if (prevSlot3Image != null) {
                                if (slot3Box.isSelected()) {
                                    BufferedImage temp = new BufferedImage(tempSlot3Image.getWidth(), tempSlot3Image.getHeight(), BufferedImage.TYPE_INT_RGB);
                                    Rectangle r = diffImage(tempSlot3Image, prevSlot3Image, sensitivitySlider.getValue(), slot3Slider.getValue(), temp);
                                    if (r != null) {
                                        Graphics2D g2d = (Graphics2D) temp.getGraphics();
                                        g2d.setColor(Color.GRAY);
                                        g2d.drawRect(r.x, r.y, r.width, r.height);
                                        thirdSlotPanel.recommendScene(r);
                                    }
                                    autopilotSlot3Label1.setIcon(new ImageIcon(temp));
                                }
                            }
                            if (prevSlot4Image != null) {
                                if (slot4Box.isSelected()) {
                                    BufferedImage temp = new BufferedImage(tempSlot4Image.getWidth(), tempSlot4Image.getHeight(), BufferedImage.TYPE_INT_RGB);
                                    Rectangle r = diffImage(tempSlot4Image, prevSlot4Image, sensitivitySlider.getValue(), slot4Slider.getValue(), temp);
                                    if (r != null) {
                                        Graphics2D g2d = (Graphics2D) temp.getGraphics();
                                        g2d.setColor(Color.YELLOW);
                                        g2d.drawRect(r.x, r.y, r.width, r.height);
                                        fourthSlotPanel.recommendScene(r);
                                    }
                                    autopilotSlot4Label1.setIcon(new ImageIcon(temp));
                                }
                            }

                            prevProgramImage = tempProgramImage;
                            prevSlot1Image = tempSlot1Image;
                            prevSlot3Image = tempSlot3Image;
                            prevSlot4Image = tempSlot4Image;
                        }

                        try {
                            Thread.sleep(450);
                        } catch (InterruptedException ex) {
                            Logger.getLogger(ObsAutomationTwo.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }

                    prevProgramImage = null;
                    prevSlot1Image = null;
                    prevSlot3Image = null;
                    prevSlot4Image = null;
                }

                private Rectangle diffImage(BufferedImage tempImage, BufferedImage prevImage, int requiredColorDifference, int requiredThreshold, BufferedImage retVal) {
                    Rectangle r = null;
                    Graphics2D g2d = (Graphics2D) retVal.getGraphics();
                    g2d.setColor(Color.BLACK);
                    g2d.fillRect(0, 0, tempImage.getWidth(), tempImage.getHeight());
                    g2d.setColor(Color.WHITE);
                    int count = 0;
                    for (int x = 0; x < tempImage.getWidth(); x++) {
                        for (int y = 0; y < tempImage.getHeight(); y++) {
                            if (isDifferent(tempImage.getRGB(x, y), prevImage.getRGB(x, y), requiredColorDifference)) {
                                count++;
                                g2d.fillRect(x, y, 1, 1);
                                if (r == null) {
                                    r = new Rectangle(x, y, 1, 1);
                                } else {
                                    if (!r.contains(x, y)) {
                                        r.add(new Rectangle(x, y, 1, 1));
                                    }
                                }
                            }
                        }
                    }

                    if (count < requiredThreshold) {
                        return null;
                    }

                    return r;
                }
            });
            t.start();
        }
    }//GEN-LAST:event_autoPilotControlPanelButtonActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        System.out.println("mark slide as blank");

        BufferedImage blank = robot.createScreenCapture(slideRectangle);
        File outputFile = new File("D:\\Dustin\\OBS Images\\BlankSlides\\" + System.currentTimeMillis() + ".png");
        try {
            ImageIO.write(blank, "PNG", outputFile);
        } catch (IOException ex) {
            Logger.getLogger(ImageCreator.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        int index = Arrays.asList(ShotTypeEnum.values()).indexOf(firstSlotPanel.getShotType());
        index++;
        if (index >= ShotTypeEnum.values().length) {
            index = 0;
        }

        firstSlotPanel.setShotType(ShotTypeEnum.values()[index]);
        jButton2.setText(firstSlotPanel.getShotType().toString());
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        int index = Arrays.asList(ShotTypeEnum.values()).indexOf(thirdSlotPanel.getShotType());
        index++;
        if (index >= ShotTypeEnum.values().length) {
            index = 0;
        }

        thirdSlotPanel.setShotType(ShotTypeEnum.values()[index]);
        jButton3.setText(thirdSlotPanel.getShotType().toString());
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        int index = Arrays.asList(ShotTypeEnum.values()).indexOf(fourthSlotPanel.getShotType());
        index++;
        if (index >= ShotTypeEnum.values().length) {
            index = 0;
        }

        fourthSlotPanel.setShotType(ShotTypeEnum.values()[index]);
        jButton6.setText(fourthSlotPanel.getShotType().toString());
    }//GEN-LAST:event_jButton6ActionPerformed

    BufferedImage prevProgramImage = null;
    BufferedImage prevSlot1Image = null;
    BufferedImage prevSlot3Image = null;
    BufferedImage prevSlot4Image = null;

    /**
     * @return the slideState
     */
    public SlideState getSlideState() {
        return slideState;
    }

    /**
     * @param slideState the slideState to set
     */
    public void setSlideState(SlideState slideState) {
//        System.out.println("     setting slide state: " + slideState.toString());
        this.slideState = slideState;
        currentOverlayLabel.setIcon(new ImageIcon(ImageUtilities.getImage(slideState.getOverlayImage(), 2.5, 0)));
        currentOverlayLabel.setToolTipText(slideState.toString());

        firstSlotPanel.setSlideState(slideState);
        thirdSlotPanel.setSlideState(slideState);
        fourthSlotPanel.setSlideState(slideState);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ObsAutomationTwo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ObsAutomationTwo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ObsAutomationTwo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ObsAutomationTwo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ObsAutomationTwo().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton autoPilotControlPanelButton;
    private javax.swing.JPanel autoPilotMessagePanel;
    private javax.swing.JPanel autoPilotUpdatePanel;
    private javax.swing.JButton autopilotButton;
    private javax.swing.JDialog autopilotDialog;
    private javax.swing.JLabel autopilotProgramLabel;
    private javax.swing.JLabel autopilotProgramLabel1;
    private javax.swing.JLabel autopilotSlot1Label;
    private javax.swing.JLabel autopilotSlot1Label1;
    private javax.swing.JLabel autopilotSlot3Label;
    private javax.swing.JLabel autopilotSlot3Label1;
    private javax.swing.JLabel autopilotSlot4Label;
    private javax.swing.JLabel autopilotSlot4Label1;
    private javax.swing.JButton countDownCancelButton;
    private javax.swing.JLabel countDownLabel;
    private javax.swing.JLabel currentOverlayLabel;
    private javax.swing.JLabel fadeLabel;
    private javax.swing.JSlider fadeSlider;
    private javax.swing.Box.Filler filler2;
    private javax.swing.JButton fullSlidesButton;
    private javax.swing.JButton goodByeButton;
    private javax.swing.JDialog helperDialog;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel17;
    private javax.swing.JPanel jPanel18;
    private javax.swing.JPanel jPanel19;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel20;
    private javax.swing.JPanel jPanel21;
    private javax.swing.JPanel jPanel22;
    private javax.swing.JPanel jPanel23;
    private javax.swing.JPanel jPanel24;
    private javax.swing.JPanel jPanel25;
    private javax.swing.JPanel jPanel26;
    private javax.swing.JPanel jPanel27;
    private javax.swing.JPanel jPanel28;
    private javax.swing.JPanel jPanel29;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel30;
    private javax.swing.JPanel jPanel31;
    private javax.swing.JPanel jPanel32;
    private javax.swing.JPanel jPanel33;
    private javax.swing.JPanel jPanel34;
    private javax.swing.JPanel jPanel35;
    private javax.swing.JPanel jPanel36;
    private javax.swing.JPanel jPanel37;
    private javax.swing.JPanel jPanel38;
    private javax.swing.JPanel jPanel39;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel40;
    private javax.swing.JPanel jPanel41;
    private javax.swing.JPanel jPanel42;
    private javax.swing.JPanel jPanel43;
    private javax.swing.JPanel jPanel44;
    private javax.swing.JPanel jPanel45;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JLabel moveLabel;
    private javax.swing.JSlider moveSlider;
    private javax.swing.JLabel multiplierLabel;
    private javax.swing.JButton oneButton;
    private javax.swing.JButton overlaySwitchButton;
    private javax.swing.JButton overlaySwitchButton1;
    private javax.swing.JPanel pickerPanel;
    private javax.swing.JButton prepHelperButton;
    private javax.swing.JPanel programPanel;
    private javax.swing.JLabel sensitivityLabel;
    private javax.swing.JSlider sensitivitySlider;
    private javax.swing.JLabel slideCountdownLabel;
    private javax.swing.JSlider slideMultiplierSlider;
    private javax.swing.JPanel slidesPanel;
    private javax.swing.JCheckBox slot1Box;
    private javax.swing.JPanel slot1Panel;
    private javax.swing.JSlider slot1Slider;
    private javax.swing.JCheckBox slot3Box;
    private javax.swing.JPanel slot3Panel;
    private javax.swing.JSlider slot3Slider;
    private javax.swing.JCheckBox slot4Box;
    private javax.swing.JPanel slot4Panel;
    private javax.swing.JSlider slot4Slider;
    private javax.swing.JButton startCountdownButton;
    private javax.swing.JButton startStreamButton;
    private javax.swing.JLabel streamPrepHelperLabel;
    private javax.swing.JButton twoButton;
    private javax.swing.JButton welcomeButton;
    private javax.swing.JButton welcomeButton1;
    private javax.swing.JButton welcomeButton2;
    private javax.swing.JTextField worshipCountdownTimer;
    private javax.swing.JDialog worshipSetCountDownDialog;
    // End of variables declaration//GEN-END:variables

    public static Robot robot = null;

    static {
        try {
            robot = new Robot();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private Rectangle slot1ThumbRect = new Rectangle(48, 276, 212, 117);
    private Rectangle slot3ThumbRect = new Rectangle(482, 276, 212, 117);
    private Rectangle slot4ThumbRect = new Rectangle(699, 276, 212, 117);

    private SlotPanel firstSlotPanel = new SlotPanel() {
        @Override
        protected void changeToScene(String scene) {
            ObsAutomationTwo.this.changeToScene(scene);
        }

        @Override
        protected void codeFromObsAutomationUtility() {
            slotThumbRect = new Rectangle(48, 276, 212, 117);

            slotOverlayMap.put("Cam11080", new ArrayList<String>());
            slotOverlayMap.get("Cam11080").add("Cam 1 1080 1,1");
            getSceneToRectMap().put("Cam 1 1080 1,1", new Rectangle(5, 5, 206, 116));
            sceneToMidpointMap.put("Cam 1 1080 1,1", new Point(108, 63));
            slotOverlayMap.get("Cam11080").add("Cam 1 1080 1,2");
            getSceneToRectMap().put("Cam 1 1080 1,2", new Rectangle(62, 5, 206, 116));
            sceneToMidpointMap.put("Cam 1 1080 1,2", new Point(165, 63));
            slotOverlayMap.get("Cam11080").add("Cam 1 1080 1,3");
            getSceneToRectMap().put("Cam 1 1080 1,3", new Rectangle(108, 5, 206, 116));
            sceneToMidpointMap.put("Cam 1 1080 1,3", new Point(211, 63));
            slotOverlayMap.get("Cam11080").add("Cam 1 1080 1,4");
            getSceneToRectMap().put("Cam 1 1080 1,4", new Rectangle(165, 5, 206, 116));
            sceneToMidpointMap.put("Cam 1 1080 1,4", new Point(268, 63));
            slotOverlayMap.get("Cam11080").add("Cam 1 1080 1,5");
            getSceneToRectMap().put("Cam 1 1080 1,5", new Rectangle(222, 5, 204, 116));
            sceneToMidpointMap.put("Cam 1 1080 1,5", new Point(324, 63));
            slotOverlayMap.get("Cam11080").add("Cam 1 1080 2,1");
            getSceneToRectMap().put("Cam 1 1080 2,1", new Rectangle(5, 28, 206, 116));
            sceneToMidpointMap.put("Cam 1 1080 2,1", new Point(108, 86));
            slotOverlayMap.get("Cam11080").add("Cam 1 1080 2,2");
            getSceneToRectMap().put("Cam 1 1080 2,2", new Rectangle(62, 28, 206, 116));
            sceneToMidpointMap.put("Cam 1 1080 2,2", new Point(165, 86));
            slotOverlayMap.get("Cam11080").add("Cam 1 1080 2,3");
            getSceneToRectMap().put("Cam 1 1080 2,3", new Rectangle(108, 28, 206, 116));
            sceneToMidpointMap.put("Cam 1 1080 2,3", new Point(211, 86));
            slotOverlayMap.get("Cam11080").add("Cam 1 1080 2,4");
            getSceneToRectMap().put("Cam 1 1080 2,4", new Rectangle(165, 28, 206, 116));
            sceneToMidpointMap.put("Cam 1 1080 2,4", new Point(268, 86));
            slotOverlayMap.get("Cam11080").add("Cam 1 1080 2,5");
            getSceneToRectMap().put("Cam 1 1080 2,5", new Rectangle(222, 28, 204, 116));
            sceneToMidpointMap.put("Cam 1 1080 2,5", new Point(324, 86));
            slotOverlayMap.get("Cam11080").add("Cam 1 1080 3,1");
            getSceneToRectMap().put("Cam 1 1080 3,1", new Rectangle(5, 63, 206, 115));
            sceneToMidpointMap.put("Cam 1 1080 3,1", new Point(108, 120));
            slotOverlayMap.get("Cam11080").add("Cam 1 1080 3,2");
            getSceneToRectMap().put("Cam 1 1080 3,2", new Rectangle(62, 63, 206, 115));
            sceneToMidpointMap.put("Cam 1 1080 3,2", new Point(165, 120));
            slotOverlayMap.get("Cam11080").add("Cam 1 1080 3,3");
            getSceneToRectMap().put("Cam 1 1080 3,3", new Rectangle(108, 63, 206, 115));
            sceneToMidpointMap.put("Cam 1 1080 3,3", new Point(211, 120));
            slotOverlayMap.get("Cam11080").add("Cam 1 1080 3,4");
            getSceneToRectMap().put("Cam 1 1080 3,4", new Rectangle(165, 63, 206, 115));
            sceneToMidpointMap.put("Cam 1 1080 3,4", new Point(268, 120));
            slotOverlayMap.get("Cam11080").add("Cam 1 1080 3,5");
            getSceneToRectMap().put("Cam 1 1080 3,5", new Rectangle(222, 63, 204, 115));
            sceneToMidpointMap.put("Cam 1 1080 3,5", new Point(324, 120));
            slotOverlayMap.get("Cam11080").add("Cam 1 1080 4,1");
            getSceneToRectMap().put("Cam 1 1080 4,1", new Rectangle(5, 98, 206, 104));
            sceneToMidpointMap.put("Cam 1 1080 4,1", new Point(108, 150));
            slotOverlayMap.get("Cam11080").add("Cam 1 1080 4,2");
            getSceneToRectMap().put("Cam 1 1080 4,2", new Rectangle(62, 98, 206, 104));
            sceneToMidpointMap.put("Cam 1 1080 4,2", new Point(165, 150));
            slotOverlayMap.get("Cam11080").add("Cam 1 1080 4,3");
            getSceneToRectMap().put("Cam 1 1080 4,3", new Rectangle(108, 98, 206, 104));
            sceneToMidpointMap.put("Cam 1 1080 4,3", new Point(211, 150));
            slotOverlayMap.get("Cam11080").add("Cam 1 1080 4,4");
            getSceneToRectMap().put("Cam 1 1080 4,4", new Rectangle(165, 98, 206, 104));
            sceneToMidpointMap.put("Cam 1 1080 4,4", new Point(268, 150));
            slotOverlayMap.get("Cam11080").add("Cam 1 1080 4,5");
            getSceneToRectMap().put("Cam 1 1080 4,5", new Rectangle(222, 98, 204, 104));
            sceneToMidpointMap.put("Cam 1 1080 4,5", new Point(324, 150));
            slotOverlayMap.get("Cam11080").add("Cam 1 1080 5,1");
            getSceneToRectMap().put("Cam 1 1080 5,1", new Rectangle(5, 121, 206, 114));
            sceneToMidpointMap.put("Cam 1 1080 5,1", new Point(108, 178));
            slotOverlayMap.get("Cam11080").add("Cam 1 1080 5,2");
            getSceneToRectMap().put("Cam 1 1080 5,2", new Rectangle(62, 121, 206, 114));
            sceneToMidpointMap.put("Cam 1 1080 5,2", new Point(165, 178));
            slotOverlayMap.get("Cam11080").add("Cam 1 1080 5,3");
            getSceneToRectMap().put("Cam 1 1080 5,3", new Rectangle(108, 121, 206, 114));
            sceneToMidpointMap.put("Cam 1 1080 5,3", new Point(211, 178));
            slotOverlayMap.get("Cam11080").add("Cam 1 1080 5,4");
            getSceneToRectMap().put("Cam 1 1080 5,4", new Rectangle(165, 121, 206, 114));
            sceneToMidpointMap.put("Cam 1 1080 5,4", new Point(268, 178));
            slotOverlayMap.get("Cam11080").add("Cam 1 1080 5,5");
            getSceneToRectMap().put("Cam 1 1080 5,5", new Rectangle(222, 121, 204, 114));
            sceneToMidpointMap.put("Cam 1 1080 5,5", new Point(324, 178));
            slotOverlayMap.put("Cam11296", new ArrayList<String>());
            slotOverlayMap.get("Cam11296").add("Cam 1 1296 1,1");
            getSceneToRectMap().put("Cam 1 1296 1,1", new Rectangle(5, 5, 263, 139));
            sceneToMidpointMap.put("Cam 1 1296 1,1", new Point(136, 74));
            slotOverlayMap.get("Cam11296").add("Cam 1 1296 1,2");
            getSceneToRectMap().put("Cam 1 1296 1,2", new Rectangle(62, 5, 252, 139));
            sceneToMidpointMap.put("Cam 1 1296 1,2", new Point(188, 74));
            slotOverlayMap.get("Cam11296").add("Cam 1 1296 1,3");
            getSceneToRectMap().put("Cam 1 1296 1,3", new Rectangle(108, 5, 263, 139));
            sceneToMidpointMap.put("Cam 1 1296 1,3", new Point(239, 74));
            slotOverlayMap.get("Cam11296").add("Cam 1 1296 1,4");
            getSceneToRectMap().put("Cam 1 1296 1,4", new Rectangle(165, 5, 261, 139));
            sceneToMidpointMap.put("Cam 1 1296 1,4", new Point(295, 74));
            slotOverlayMap.get("Cam11296").add("Cam 1 1296 2,1");
            getSceneToRectMap().put("Cam 1 1296 2,1", new Rectangle(5, 40, 263, 138));
            sceneToMidpointMap.put("Cam 1 1296 2,1", new Point(136, 109));
            slotOverlayMap.get("Cam11296").add("Cam 1 1296 2,2");
            getSceneToRectMap().put("Cam 1 1296 2,2", new Rectangle(62, 40, 252, 138));
            sceneToMidpointMap.put("Cam 1 1296 2,2", new Point(188, 109));
            slotOverlayMap.get("Cam11296").add("Cam 1 1296 2,3");
            getSceneToRectMap().put("Cam 1 1296 2,3", new Rectangle(108, 40, 263, 138));
            sceneToMidpointMap.put("Cam 1 1296 2,3", new Point(239, 109));
            slotOverlayMap.get("Cam11296").add("Cam 1 1296 2,4");
            getSceneToRectMap().put("Cam 1 1296 2,4", new Rectangle(165, 40, 261, 138));
            sceneToMidpointMap.put("Cam 1 1296 2,4", new Point(295, 109));
            slotOverlayMap.get("Cam11296").add("Cam 1 1296 3,1");
            getSceneToRectMap().put("Cam 1 1296 3,1", new Rectangle(5, 63, 263, 139));
            sceneToMidpointMap.put("Cam 1 1296 3,1", new Point(136, 132));
            slotOverlayMap.get("Cam11296").add("Cam 1 1296 3,2");
            getSceneToRectMap().put("Cam 1 1296 3,2", new Rectangle(62, 63, 252, 139));
            sceneToMidpointMap.put("Cam 1 1296 3,2", new Point(188, 132));
            slotOverlayMap.get("Cam11296").add("Cam 1 1296 3,3");
            getSceneToRectMap().put("Cam 1 1296 3,3", new Rectangle(108, 63, 263, 139));
            sceneToMidpointMap.put("Cam 1 1296 3,3", new Point(239, 132));
            slotOverlayMap.get("Cam11296").add("Cam 1 1296 3,4");
            getSceneToRectMap().put("Cam 1 1296 3,4", new Rectangle(165, 63, 261, 139));
            sceneToMidpointMap.put("Cam 1 1296 3,4", new Point(295, 132));
            slotOverlayMap.get("Cam11296").add("Cam 1 1296 4,1");
            getSceneToRectMap().put("Cam 1 1296 4,1", new Rectangle(5, 98, 263, 137));
            sceneToMidpointMap.put("Cam 1 1296 4,1", new Point(136, 166));
            slotOverlayMap.get("Cam11296").add("Cam 1 1296 4,2");
            getSceneToRectMap().put("Cam 1 1296 4,2", new Rectangle(62, 98, 252, 137));
            sceneToMidpointMap.put("Cam 1 1296 4,2", new Point(188, 166));
            slotOverlayMap.get("Cam11296").add("Cam 1 1296 4,3");
            getSceneToRectMap().put("Cam 1 1296 4,3", new Rectangle(108, 98, 263, 137));
            sceneToMidpointMap.put("Cam 1 1296 4,3", new Point(239, 166));
            slotOverlayMap.get("Cam11296").add("Cam 1 1296 4,4");
            getSceneToRectMap().put("Cam 1 1296 4,4", new Rectangle(165, 98, 261, 137));
            sceneToMidpointMap.put("Cam 1 1296 4,4", new Point(295, 166));
            slotOverlayMap.put("Cam11512", new ArrayList<String>());
            slotOverlayMap.get("Cam11512").add("Cam 1 1512 1,1");
            getSceneToRectMap().put("Cam 1 1512 1,1", new Rectangle(5, 5, 309, 173));
            sceneToMidpointMap.put("Cam 1 1512 1,1", new Point(159, 91));
            slotOverlayMap.get("Cam11512").add("Cam 1 1512 1,2");
            getSceneToRectMap().put("Cam 1 1512 1,2", new Rectangle(62, 5, 309, 173));
            sceneToMidpointMap.put("Cam 1 1512 1,2", new Point(216, 91));
            slotOverlayMap.get("Cam11512").add("Cam 1 1512 1,3");
            getSceneToRectMap().put("Cam 1 1512 1,3", new Rectangle(108, 5, 318, 173));
            sceneToMidpointMap.put("Cam 1 1512 1,3", new Point(267, 91));
            slotOverlayMap.get("Cam11512").add("Cam 1 1512 2,1");
            getSceneToRectMap().put("Cam 1 1512 2,1", new Rectangle(5, 40, 309, 162));
            sceneToMidpointMap.put("Cam 1 1512 2,1", new Point(159, 121));
            slotOverlayMap.get("Cam11512").add("Cam 1 1512 2,2");
            getSceneToRectMap().put("Cam 1 1512 2,2", new Rectangle(62, 40, 309, 162));
            sceneToMidpointMap.put("Cam 1 1512 2,2", new Point(216, 121));
            slotOverlayMap.get("Cam11512").add("Cam 1 1512 2,3");
            getSceneToRectMap().put("Cam 1 1512 2,3", new Rectangle(108, 40, 318, 162));
            sceneToMidpointMap.put("Cam 1 1512 2,3", new Point(267, 121));
            slotOverlayMap.get("Cam11512").add("Cam 1 1512 3,1");
            getSceneToRectMap().put("Cam 1 1512 3,1", new Rectangle(5, 63, 309, 172));
            sceneToMidpointMap.put("Cam 1 1512 3,1", new Point(159, 149));
            slotOverlayMap.get("Cam11512").add("Cam 1 1512 3,2");
            getSceneToRectMap().put("Cam 1 1512 3,2", new Rectangle(62, 63, 309, 172));
            sceneToMidpointMap.put("Cam 1 1512 3,2", new Point(216, 149));
            slotOverlayMap.get("Cam11512").add("Cam 1 1512 3,3");
            getSceneToRectMap().put("Cam 1 1512 3,3", new Rectangle(108, 63, 318, 172));
            sceneToMidpointMap.put("Cam 1 1512 3,3", new Point(267, 149));
            slotOverlayMap.put("Cam11728", new ArrayList<String>());
            slotOverlayMap.get("Cam11728").add("Cam 1 1728 1,1");
            getSceneToRectMap().put("Cam 1 1728 1,1", new Rectangle(5, 5, 366, 197));
            sceneToMidpointMap.put("Cam 1 1728 1,1", new Point(188, 103));
            slotOverlayMap.get("Cam11728").add("Cam 1 1728 1,2");
            getSceneToRectMap().put("Cam 1 1728 1,2", new Rectangle(62, 5, 364, 197));
            sceneToMidpointMap.put("Cam 1 1728 1,2", new Point(244, 103));
            slotOverlayMap.get("Cam11728").add("Cam 1 1728 2,1");
            getSceneToRectMap().put("Cam 1 1728 2,1", new Rectangle(5, 40, 366, 195));
            sceneToMidpointMap.put("Cam 1 1728 2,1", new Point(188, 137));
            slotOverlayMap.get("Cam11728").add("Cam 1 1728 2,2");
            getSceneToRectMap().put("Cam 1 1728 2,2", new Rectangle(62, 40, 364, 195));
            sceneToMidpointMap.put("Cam 1 1728 2,2", new Point(244, 137));
            slotOverlayMap.put("Cam11944", new ArrayList<String>());
            slotOverlayMap.get("Cam11944").add("Cam 1 1944 1,1");
            getSceneToRectMap().put("Cam 1 1944 1,1", new Rectangle(5, 5, 411, 230));
            sceneToMidpointMap.put("Cam 1 1944 1,1", new Point(210, 120));
            slotOverlayMap.put("Cam1Slides1080", new ArrayList<String>());
            slotOverlayMap.get("Cam1Slides1080").add("Cam 1 Slides 1080 1,1");
            getSceneToRectMap().put("Cam 1 Slides 1080 1,1", new Rectangle(5, 5, 149, 116));
            sceneToMidpointMap.put("Cam 1 Slides 1080 1,1", new Point(79, 63));
            slotOverlayMap.get("Cam1Slides1080").add("Cam 1 Slides 1080 1,2");
            getSceneToRectMap().put("Cam 1 Slides 1080 1,2", new Rectangle(51, 5, 160, 116));
            sceneToMidpointMap.put("Cam 1 Slides 1080 1,2", new Point(131, 63));
            slotOverlayMap.get("Cam1Slides1080").add("Cam 1 Slides 1080 1,3");
            getSceneToRectMap().put("Cam 1 Slides 1080 1,3", new Rectangle(108, 5, 148, 116));
            sceneToMidpointMap.put("Cam 1 Slides 1080 1,3", new Point(182, 63));
            slotOverlayMap.get("Cam1Slides1080").add("Cam 1 Slides 1080 1,4");
            getSceneToRectMap().put("Cam 1 Slides 1080 1,4", new Rectangle(165, 5, 149, 116));
            sceneToMidpointMap.put("Cam 1 Slides 1080 1,4", new Point(239, 63));
            slotOverlayMap.get("Cam1Slides1080").add("Cam 1 Slides 1080 1,5");
            getSceneToRectMap().put("Cam 1 Slides 1080 1,5", new Rectangle(211, 5, 160, 116));
            sceneToMidpointMap.put("Cam 1 Slides 1080 1,5", new Point(291, 63));
            slotOverlayMap.get("Cam1Slides1080").add("Cam 1 Slides 1080 1,6");
            getSceneToRectMap().put("Cam 1 Slides 1080 1,6", new Rectangle(268, 5, 148, 116));
            sceneToMidpointMap.put("Cam 1 Slides 1080 1,6", new Point(342, 63));
            slotOverlayMap.get("Cam1Slides1080").add("Cam 1 Slides 1080 2,1");
            getSceneToRectMap().put("Cam 1 Slides 1080 2,1", new Rectangle(5, 28, 149, 116));
            sceneToMidpointMap.put("Cam 1 Slides 1080 2,1", new Point(79, 86));
            slotOverlayMap.get("Cam1Slides1080").add("Cam 1 Slides 1080 2,2");
            getSceneToRectMap().put("Cam 1 Slides 1080 2,2", new Rectangle(51, 28, 160, 116));
            sceneToMidpointMap.put("Cam 1 Slides 1080 2,2", new Point(131, 86));
            slotOverlayMap.get("Cam1Slides1080").add("Cam 1 Slides 1080 2,3");
            getSceneToRectMap().put("Cam 1 Slides 1080 2,3", new Rectangle(108, 28, 148, 116));
            sceneToMidpointMap.put("Cam 1 Slides 1080 2,3", new Point(182, 86));
            slotOverlayMap.get("Cam1Slides1080").add("Cam 1 Slides 1080 2,4");
            getSceneToRectMap().put("Cam 1 Slides 1080 2,4", new Rectangle(165, 28, 149, 116));
            sceneToMidpointMap.put("Cam 1 Slides 1080 2,4", new Point(239, 86));
            slotOverlayMap.get("Cam1Slides1080").add("Cam 1 Slides 1080 2,5");
            getSceneToRectMap().put("Cam 1 Slides 1080 2,5", new Rectangle(211, 28, 160, 116));
            sceneToMidpointMap.put("Cam 1 Slides 1080 2,5", new Point(291, 86));
            slotOverlayMap.get("Cam1Slides1080").add("Cam 1 Slides 1080 2,6");
            getSceneToRectMap().put("Cam 1 Slides 1080 2,6", new Rectangle(268, 28, 148, 116));
            sceneToMidpointMap.put("Cam 1 Slides 1080 2,6", new Point(342, 86));
            slotOverlayMap.get("Cam1Slides1080").add("Cam 1 Slides 1080 3,1");
            getSceneToRectMap().put("Cam 1 Slides 1080 3,1", new Rectangle(5, 63, 149, 104));
            sceneToMidpointMap.put("Cam 1 Slides 1080 3,1", new Point(79, 115));
            slotOverlayMap.get("Cam1Slides1080").add("Cam 1 Slides 1080 3,2");
            getSceneToRectMap().put("Cam 1 Slides 1080 3,2", new Rectangle(51, 63, 160, 104));
            sceneToMidpointMap.put("Cam 1 Slides 1080 3,2", new Point(131, 115));
            slotOverlayMap.get("Cam1Slides1080").add("Cam 1 Slides 1080 3,3");
            getSceneToRectMap().put("Cam 1 Slides 1080 3,3", new Rectangle(108, 63, 148, 104));
            sceneToMidpointMap.put("Cam 1 Slides 1080 3,3", new Point(182, 115));
            slotOverlayMap.get("Cam1Slides1080").add("Cam 1 Slides 1080 3,4");
            getSceneToRectMap().put("Cam 1 Slides 1080 3,4", new Rectangle(165, 63, 149, 104));
            sceneToMidpointMap.put("Cam 1 Slides 1080 3,4", new Point(239, 115));
            slotOverlayMap.get("Cam1Slides1080").add("Cam 1 Slides 1080 3,5");
            getSceneToRectMap().put("Cam 1 Slides 1080 3,5", new Rectangle(211, 63, 160, 104));
            sceneToMidpointMap.put("Cam 1 Slides 1080 3,5", new Point(291, 115));
            slotOverlayMap.get("Cam1Slides1080").add("Cam 1 Slides 1080 3,6");
            getSceneToRectMap().put("Cam 1 Slides 1080 3,6", new Rectangle(268, 63, 148, 104));
            sceneToMidpointMap.put("Cam 1 Slides 1080 3,6", new Point(342, 115));
            slotOverlayMap.get("Cam1Slides1080").add("Cam 1 Slides 1080 4,1");
            getSceneToRectMap().put("Cam 1 Slides 1080 4,1", new Rectangle(5, 86, 149, 116));
            sceneToMidpointMap.put("Cam 1 Slides 1080 4,1", new Point(79, 144));
            slotOverlayMap.get("Cam1Slides1080").add("Cam 1 Slides 1080 4,2");
            getSceneToRectMap().put("Cam 1 Slides 1080 4,2", new Rectangle(51, 86, 160, 116));
            sceneToMidpointMap.put("Cam 1 Slides 1080 4,2", new Point(131, 144));
            slotOverlayMap.get("Cam1Slides1080").add("Cam 1 Slides 1080 4,3");
            getSceneToRectMap().put("Cam 1 Slides 1080 4,3", new Rectangle(108, 86, 148, 116));
            sceneToMidpointMap.put("Cam 1 Slides 1080 4,3", new Point(182, 144));
            slotOverlayMap.get("Cam1Slides1080").add("Cam 1 Slides 1080 4,4");
            getSceneToRectMap().put("Cam 1 Slides 1080 4,4", new Rectangle(165, 98, 149, 104));
            sceneToMidpointMap.put("Cam 1 Slides 1080 4,4", new Point(239, 150));
            slotOverlayMap.get("Cam1Slides1080").add("Cam 1 Slides 1080 4,5");
            getSceneToRectMap().put("Cam 1 Slides 1080 4,5", new Rectangle(211, 98, 160, 104));
            sceneToMidpointMap.put("Cam 1 Slides 1080 4,5", new Point(291, 150));
            slotOverlayMap.get("Cam1Slides1080").add("Cam 1 Slides 1080 4,6");
            getSceneToRectMap().put("Cam 1 Slides 1080 4,6", new Rectangle(268, 98, 148, 104));
            sceneToMidpointMap.put("Cam 1 Slides 1080 4,6", new Point(342, 150));
            slotOverlayMap.get("Cam1Slides1080").add("Cam 1 Slides 1080 5,1");
            getSceneToRectMap().put("Cam 1 Slides 1080 5,1", new Rectangle(5, 121, 149, 114));
            sceneToMidpointMap.put("Cam 1 Slides 1080 5,1", new Point(79, 178));
            slotOverlayMap.get("Cam1Slides1080").add("Cam 1 Slides 1080 5,2");
            getSceneToRectMap().put("Cam 1 Slides 1080 5,2", new Rectangle(51, 121, 160, 114));
            sceneToMidpointMap.put("Cam 1 Slides 1080 5,2", new Point(131, 178));
            slotOverlayMap.get("Cam1Slides1080").add("Cam 1 Slides 1080 5,3");
            getSceneToRectMap().put("Cam 1 Slides 1080 5,3", new Rectangle(108, 121, 148, 114));
            sceneToMidpointMap.put("Cam 1 Slides 1080 5,3", new Point(182, 178));
            slotOverlayMap.get("Cam1Slides1080").add("Cam 1 Slides 1080 5,4");
            getSceneToRectMap().put("Cam 1 Slides 1080 5,4", new Rectangle(165, 121, 149, 114));
            sceneToMidpointMap.put("Cam 1 Slides 1080 5,4", new Point(239, 178));
            slotOverlayMap.get("Cam1Slides1080").add("Cam 1 Slides 1080 5,5");
            getSceneToRectMap().put("Cam 1 Slides 1080 5,5", new Rectangle(211, 121, 160, 114));
            sceneToMidpointMap.put("Cam 1 Slides 1080 5,5", new Point(291, 178));
            slotOverlayMap.get("Cam1Slides1080").add("Cam 1 Slides 1080 5,6");
            getSceneToRectMap().put("Cam 1 Slides 1080 5,6", new Rectangle(268, 121, 148, 114));
            sceneToMidpointMap.put("Cam 1 Slides 1080 5,6", new Point(342, 178));
            slotOverlayMap.put("Cam1Slides1296", new ArrayList<String>());
            slotOverlayMap.get("Cam1Slides1296").add("Cam 1 Slides 1296 1,1");
            getSceneToRectMap().put("Cam 1 Slides 1296 1,1", new Rectangle(5, 5, 171, 127));
            sceneToMidpointMap.put("Cam 1 Slides 1296 1,1", new Point(90, 68));
            slotOverlayMap.get("Cam1Slides1296").add("Cam 1 Slides 1296 1,2");
            getSceneToRectMap().put("Cam 1 Slides 1296 1,2", new Rectangle(51, 5, 183, 127));
            sceneToMidpointMap.put("Cam 1 Slides 1296 1,2", new Point(142, 68));
            slotOverlayMap.get("Cam1Slides1296").add("Cam 1 Slides 1296 1,3");
            getSceneToRectMap().put("Cam 1 Slides 1296 1,3", new Rectangle(108, 5, 171, 127));
            sceneToMidpointMap.put("Cam 1 Slides 1296 1,3", new Point(193, 68));
            slotOverlayMap.get("Cam1Slides1296").add("Cam 1 Slides 1296 1,4");
            getSceneToRectMap().put("Cam 1 Slides 1296 1,4", new Rectangle(154, 5, 171, 127));
            sceneToMidpointMap.put("Cam 1 Slides 1296 1,4", new Point(239, 68));
            slotOverlayMap.get("Cam1Slides1296").add("Cam 1 Slides 1296 1,5");
            getSceneToRectMap().put("Cam 1 Slides 1296 1,5", new Rectangle(199, 5, 183, 127));
            sceneToMidpointMap.put("Cam 1 Slides 1296 1,5", new Point(290, 68));
            slotOverlayMap.get("Cam1Slides1296").add("Cam 1 Slides 1296 1,6");
            getSceneToRectMap().put("Cam 1 Slides 1296 1,6", new Rectangle(245, 5, 171, 127));
            sceneToMidpointMap.put("Cam 1 Slides 1296 1,6", new Point(330, 68));
            slotOverlayMap.get("Cam1Slides1296").add("Cam 1 Slides 1296 2,1");
            getSceneToRectMap().put("Cam 1 Slides 1296 2,1", new Rectangle(5, 28, 171, 127));
            sceneToMidpointMap.put("Cam 1 Slides 1296 2,1", new Point(90, 91));
            slotOverlayMap.get("Cam1Slides1296").add("Cam 1 Slides 1296 2,2");
            getSceneToRectMap().put("Cam 1 Slides 1296 2,2", new Rectangle(51, 28, 183, 127));
            sceneToMidpointMap.put("Cam 1 Slides 1296 2,2", new Point(142, 91));
            slotOverlayMap.get("Cam1Slides1296").add("Cam 1 Slides 1296 2,3");
            getSceneToRectMap().put("Cam 1 Slides 1296 2,3", new Rectangle(108, 28, 171, 127));
            sceneToMidpointMap.put("Cam 1 Slides 1296 2,3", new Point(193, 91));
            slotOverlayMap.get("Cam1Slides1296").add("Cam 1 Slides 1296 2,4");
            getSceneToRectMap().put("Cam 1 Slides 1296 2,4", new Rectangle(154, 28, 171, 127));
            sceneToMidpointMap.put("Cam 1 Slides 1296 2,4", new Point(239, 91));
            slotOverlayMap.get("Cam1Slides1296").add("Cam 1 Slides 1296 2,5");
            getSceneToRectMap().put("Cam 1 Slides 1296 2,5", new Rectangle(199, 28, 183, 127));
            sceneToMidpointMap.put("Cam 1 Slides 1296 2,5", new Point(290, 91));
            slotOverlayMap.get("Cam1Slides1296").add("Cam 1 Slides 1296 2,6");
            getSceneToRectMap().put("Cam 1 Slides 1296 2,6", new Rectangle(245, 28, 171, 127));
            sceneToMidpointMap.put("Cam 1 Slides 1296 2,6", new Point(330, 91));
            slotOverlayMap.get("Cam1Slides1296").add("Cam 1 Slides 1296 3,1");
            getSceneToRectMap().put("Cam 1 Slides 1296 3,1", new Rectangle(5, 63, 171, 127));
            sceneToMidpointMap.put("Cam 1 Slides 1296 3,1", new Point(90, 126));
            slotOverlayMap.get("Cam1Slides1296").add("Cam 1 Slides 1296 3,2");
            getSceneToRectMap().put("Cam 1 Slides 1296 3,2", new Rectangle(51, 63, 183, 127));
            sceneToMidpointMap.put("Cam 1 Slides 1296 3,2", new Point(142, 126));
            slotOverlayMap.get("Cam1Slides1296").add("Cam 1 Slides 1296 3,3");
            getSceneToRectMap().put("Cam 1 Slides 1296 3,3", new Rectangle(108, 63, 171, 127));
            sceneToMidpointMap.put("Cam 1 Slides 1296 3,3", new Point(193, 126));
            slotOverlayMap.get("Cam1Slides1296").add("Cam 1 Slides 1296 3,4");
            getSceneToRectMap().put("Cam 1 Slides 1296 3,4", new Rectangle(154, 63, 171, 127));
            sceneToMidpointMap.put("Cam 1 Slides 1296 3,4", new Point(239, 126));
            slotOverlayMap.get("Cam1Slides1296").add("Cam 1 Slides 1296 3,5");
            getSceneToRectMap().put("Cam 1 Slides 1296 3,5", new Rectangle(199, 63, 183, 127));
            sceneToMidpointMap.put("Cam 1 Slides 1296 3,5", new Point(290, 126));
            slotOverlayMap.get("Cam1Slides1296").add("Cam 1 Slides 1296 3,6");
            getSceneToRectMap().put("Cam 1 Slides 1296 3,6", new Rectangle(245, 63, 171, 127));
            sceneToMidpointMap.put("Cam 1 Slides 1296 3,6", new Point(330, 126));
            slotOverlayMap.get("Cam1Slides1296").add("Cam 1 Slides 1296 4,1");
            getSceneToRectMap().put("Cam 1 Slides 1296 4,1", new Rectangle(5, 98, 171, 115));
            sceneToMidpointMap.put("Cam 1 Slides 1296 4,1", new Point(90, 155));
            slotOverlayMap.get("Cam1Slides1296").add("Cam 1 Slides 1296 4,2");
            getSceneToRectMap().put("Cam 1 Slides 1296 4,2", new Rectangle(51, 98, 183, 115));
            sceneToMidpointMap.put("Cam 1 Slides 1296 4,2", new Point(142, 155));
            slotOverlayMap.get("Cam1Slides1296").add("Cam 1 Slides 1296 4,3");
            getSceneToRectMap().put("Cam 1 Slides 1296 4,3", new Rectangle(108, 98, 171, 115));
            sceneToMidpointMap.put("Cam 1 Slides 1296 4,3", new Point(193, 155));
            slotOverlayMap.get("Cam1Slides1296").add("Cam 1 Slides 1296 4,4");
            getSceneToRectMap().put("Cam 1 Slides 1296 4,4", new Rectangle(154, 98, 171, 115));
            sceneToMidpointMap.put("Cam 1 Slides 1296 4,4", new Point(239, 155));
            slotOverlayMap.get("Cam1Slides1296").add("Cam 1 Slides 1296 4,5");
            getSceneToRectMap().put("Cam 1 Slides 1296 4,5", new Rectangle(199, 98, 183, 115));
            sceneToMidpointMap.put("Cam 1 Slides 1296 4,5", new Point(290, 155));
            slotOverlayMap.get("Cam1Slides1296").add("Cam 1 Slides 1296 4,6");
            getSceneToRectMap().put("Cam 1 Slides 1296 4,6", new Rectangle(245, 98, 171, 115));
            sceneToMidpointMap.put("Cam 1 Slides 1296 4,6", new Point(330, 155));
            slotOverlayMap.get("Cam1Slides1296").add("Cam 1 Slides 1296 5,1");
            getSceneToRectMap().put("Cam 1 Slides 1296 5,1", new Rectangle(5, 109, 171, 126));
            sceneToMidpointMap.put("Cam 1 Slides 1296 5,1", new Point(90, 172));
            slotOverlayMap.get("Cam1Slides1296").add("Cam 1 Slides 1296 5,2");
            getSceneToRectMap().put("Cam 1 Slides 1296 5,2", new Rectangle(51, 109, 183, 126));
            sceneToMidpointMap.put("Cam 1 Slides 1296 5,2", new Point(142, 172));
            slotOverlayMap.get("Cam1Slides1296").add("Cam 1 Slides 1296 5,3");
            getSceneToRectMap().put("Cam 1 Slides 1296 5,3", new Rectangle(108, 109, 171, 126));
            sceneToMidpointMap.put("Cam 1 Slides 1296 5,3", new Point(193, 172));
            slotOverlayMap.get("Cam1Slides1296").add("Cam 1 Slides 1296 5,4");
            getSceneToRectMap().put("Cam 1 Slides 1296 5,4", new Rectangle(154, 109, 171, 126));
            sceneToMidpointMap.put("Cam 1 Slides 1296 5,4", new Point(239, 172));
            slotOverlayMap.get("Cam1Slides1296").add("Cam 1 Slides 1296 5,5");
            getSceneToRectMap().put("Cam 1 Slides 1296 5,5", new Rectangle(199, 109, 183, 126));
            sceneToMidpointMap.put("Cam 1 Slides 1296 5,5", new Point(290, 172));
            slotOverlayMap.get("Cam1Slides1296").add("Cam 1 Slides 1296 5,6");
            getSceneToRectMap().put("Cam 1 Slides 1296 5,6", new Rectangle(245, 109, 171, 126));
            sceneToMidpointMap.put("Cam 1 Slides 1296 5,6", new Point(330, 172));
            slotOverlayMap.put("Cam1Slides1512", new ArrayList<String>());
            slotOverlayMap.get("Cam1Slides1512").add("Cam 1 Slides 1512 1,1");
            getSceneToRectMap().put("Cam 1 Slides 1512 1,1", new Rectangle(5, 5, 229, 173));
            sceneToMidpointMap.put("Cam 1 Slides 1512 1,1", new Point(119, 91));
            slotOverlayMap.get("Cam1Slides1512").add("Cam 1 Slides 1512 1,2");
            getSceneToRectMap().put("Cam 1 Slides 1512 1,2", new Rectangle(51, 5, 240, 173));
            sceneToMidpointMap.put("Cam 1 Slides 1512 1,2", new Point(171, 91));
            slotOverlayMap.get("Cam1Slides1512").add("Cam 1 Slides 1512 1,3");
            getSceneToRectMap().put("Cam 1 Slides 1512 1,3", new Rectangle(96, 5, 229, 173));
            sceneToMidpointMap.put("Cam 1 Slides 1512 1,3", new Point(210, 91));
            slotOverlayMap.get("Cam1Slides1512").add("Cam 1 Slides 1512 1,4");
            getSceneToRectMap().put("Cam 1 Slides 1512 1,4", new Rectangle(142, 5, 229, 173));
            sceneToMidpointMap.put("Cam 1 Slides 1512 1,4", new Point(256, 91));
            slotOverlayMap.get("Cam1Slides1512").add("Cam 1 Slides 1512 1,5");
            getSceneToRectMap().put("Cam 1 Slides 1512 1,5", new Rectangle(188, 5, 228, 173));
            sceneToMidpointMap.put("Cam 1 Slides 1512 1,5", new Point(302, 91));
            slotOverlayMap.get("Cam1Slides1512").add("Cam 1 Slides 1512 2,1");
            getSceneToRectMap().put("Cam 1 Slides 1512 2,1", new Rectangle(5, 28, 229, 174));
            sceneToMidpointMap.put("Cam 1 Slides 1512 2,1", new Point(119, 115));
            slotOverlayMap.get("Cam1Slides1512").add("Cam 1 Slides 1512 2,2");
            getSceneToRectMap().put("Cam 1 Slides 1512 2,2", new Rectangle(51, 28, 240, 174));
            sceneToMidpointMap.put("Cam 1 Slides 1512 2,2", new Point(171, 115));
            slotOverlayMap.get("Cam1Slides1512").add("Cam 1 Slides 1512 2,3");
            getSceneToRectMap().put("Cam 1 Slides 1512 2,3", new Rectangle(96, 28, 229, 174));
            sceneToMidpointMap.put("Cam 1 Slides 1512 2,3", new Point(210, 115));
            slotOverlayMap.get("Cam1Slides1512").add("Cam 1 Slides 1512 2,4");
            getSceneToRectMap().put("Cam 1 Slides 1512 2,4", new Rectangle(142, 28, 229, 174));
            sceneToMidpointMap.put("Cam 1 Slides 1512 2,4", new Point(256, 115));
            slotOverlayMap.get("Cam1Slides1512").add("Cam 1 Slides 1512 2,5");
            getSceneToRectMap().put("Cam 1 Slides 1512 2,5", new Rectangle(188, 28, 228, 174));
            sceneToMidpointMap.put("Cam 1 Slides 1512 2,5", new Point(302, 115));
            slotOverlayMap.get("Cam1Slides1512").add("Cam 1 Slides 1512 3,1");
            getSceneToRectMap().put("Cam 1 Slides 1512 3,1", new Rectangle(5, 63, 229, 172));
            sceneToMidpointMap.put("Cam 1 Slides 1512 3,1", new Point(119, 149));
            slotOverlayMap.get("Cam1Slides1512").add("Cam 1 Slides 1512 3,2");
            getSceneToRectMap().put("Cam 1 Slides 1512 3,2", new Rectangle(51, 63, 240, 172));
            sceneToMidpointMap.put("Cam 1 Slides 1512 3,2", new Point(171, 149));
            slotOverlayMap.get("Cam1Slides1512").add("Cam 1 Slides 1512 3,3");
            getSceneToRectMap().put("Cam 1 Slides 1512 3,3", new Rectangle(96, 63, 229, 172));
            sceneToMidpointMap.put("Cam 1 Slides 1512 3,3", new Point(210, 149));
            slotOverlayMap.get("Cam1Slides1512").add("Cam 1 Slides 1512 3,4");
            getSceneToRectMap().put("Cam 1 Slides 1512 3,4", new Rectangle(142, 63, 229, 172));
            sceneToMidpointMap.put("Cam 1 Slides 1512 3,4", new Point(256, 149));
            slotOverlayMap.get("Cam1Slides1512").add("Cam 1 Slides 1512 3,5");
            getSceneToRectMap().put("Cam 1 Slides 1512 3,5", new Rectangle(186, 63, 230, 172));
            sceneToMidpointMap.put("Cam 1 Slides 1512 3,5", new Point(301, 149));
            slotOverlayMap.put("Cam1Slides1728", new ArrayList<String>());
            slotOverlayMap.get("Cam1Slides1728").add("Cam 1 Slides 1728 1,1");
            getSceneToRectMap().put("Cam 1 Slides 1728 1,1", new Rectangle(5, 5, 274, 197));
            sceneToMidpointMap.put("Cam 1 Slides 1728 1,1", new Point(142, 103));
            slotOverlayMap.get("Cam1Slides1728").add("Cam 1 Slides 1728 1,2");
            getSceneToRectMap().put("Cam 1 Slides 1728 1,2", new Rectangle(51, 5, 274, 197));
            sceneToMidpointMap.put("Cam 1 Slides 1728 1,2", new Point(188, 103));
            slotOverlayMap.get("Cam1Slides1728").add("Cam 1 Slides 1728 1,3");
            getSceneToRectMap().put("Cam 1 Slides 1728 1,3", new Rectangle(96, 5, 275, 197));
            sceneToMidpointMap.put("Cam 1 Slides 1728 1,3", new Point(233, 103));
            slotOverlayMap.get("Cam1Slides1728").add("Cam 1 Slides 1728 1,4");
            getSceneToRectMap().put("Cam 1 Slides 1728 1,4", new Rectangle(142, 5, 274, 197));
            sceneToMidpointMap.put("Cam 1 Slides 1728 1,4", new Point(279, 103));
            slotOverlayMap.get("Cam1Slides1728").add("Cam 1 Slides 1728 2,1");
            getSceneToRectMap().put("Cam 1 Slides 1728 2,1", new Rectangle(5, 28, 274, 198));
            sceneToMidpointMap.put("Cam 1 Slides 1728 2,1", new Point(142, 127));
            slotOverlayMap.get("Cam1Slides1728").add("Cam 1 Slides 1728 2,2");
            getSceneToRectMap().put("Cam 1 Slides 1728 2,2", new Rectangle(51, 28, 274, 198));
            sceneToMidpointMap.put("Cam 1 Slides 1728 2,2", new Point(188, 127));
            slotOverlayMap.get("Cam1Slides1728").add("Cam 1 Slides 1728 2,3");
            getSceneToRectMap().put("Cam 1 Slides 1728 2,3", new Rectangle(96, 28, 275, 198));
            sceneToMidpointMap.put("Cam 1 Slides 1728 2,3", new Point(233, 127));
            slotOverlayMap.get("Cam1Slides1728").add("Cam 1 Slides 1728 2,4");
            getSceneToRectMap().put("Cam 1 Slides 1728 2,4", new Rectangle(142, 28, 274, 198));
            sceneToMidpointMap.put("Cam 1 Slides 1728 2,4", new Point(279, 127));
            slotOverlayMap.put("Cam1Slides1944", new ArrayList<String>());
            slotOverlayMap.get("Cam1Slides1944").add("Cam 1 Slides 1944 1,1");
            getSceneToRectMap().put("Cam 1 Slides 1944 1,1", new Rectangle(5, 5, 309, 221));
            sceneToMidpointMap.put("Cam 1 Slides 1944 1,1", new Point(159, 115));
            slotOverlayMap.get("Cam1Slides1944").add("Cam 1 Slides 1944 1,2");
            getSceneToRectMap().put("Cam 1 Slides 1944 1,2", new Rectangle(62, 5, 309, 221));
            sceneToMidpointMap.put("Cam 1 Slides 1944 1,2", new Point(216, 115));
            slotOverlayMap.get("Cam1Slides1944").add("Cam 1 Slides 1944 1,3");
            getSceneToRectMap().put("Cam 1 Slides 1944 1,3", new Rectangle(119, 5, 297, 221));
            sceneToMidpointMap.put("Cam 1 Slides 1944 1,3", new Point(267, 115));
            slotOverlayMap.put("Cam11296", new ArrayList<String>());
        }
    };

    private SlotPanel thirdSlotPanel = new SlotPanel() {
        @Override
        protected void codeFromObsAutomationUtility() {
            slotThumbRect = new Rectangle(482, 276, 212, 117);
            slotOverlayMap.put("Cam21080", new ArrayList<String>());
            slotOverlayMap.get("Cam21080").add("Cam 2 1080 1,1");
            getSceneToRectMap().put("Cam 2 1080 1,1", new Rectangle(5, 5, 206, 116));
            sceneToMidpointMap.put("Cam 2 1080 1,1", new Point(108, 63));
            slotOverlayMap.get("Cam21080").add("Cam 2 1080 1,2");
            getSceneToRectMap().put("Cam 2 1080 1,2", new Rectangle(62, 5, 206, 116));
            sceneToMidpointMap.put("Cam 2 1080 1,2", new Point(165, 63));
            slotOverlayMap.get("Cam21080").add("Cam 2 1080 1,3");
            getSceneToRectMap().put("Cam 2 1080 1,3", new Rectangle(108, 5, 206, 116));
            sceneToMidpointMap.put("Cam 2 1080 1,3", new Point(211, 63));
            slotOverlayMap.get("Cam21080").add("Cam 2 1080 1,4");
            getSceneToRectMap().put("Cam 2 1080 1,4", new Rectangle(165, 5, 206, 116));
            sceneToMidpointMap.put("Cam 2 1080 1,4", new Point(268, 63));
            slotOverlayMap.get("Cam21080").add("Cam 2 1080 1,5");
            getSceneToRectMap().put("Cam 2 1080 1,5", new Rectangle(222, 5, 204, 116));
            sceneToMidpointMap.put("Cam 2 1080 1,5", new Point(324, 63));
            slotOverlayMap.get("Cam21080").add("Cam 2 1080 2,1");
            getSceneToRectMap().put("Cam 2 1080 2,1", new Rectangle(5, 28, 206, 116));
            sceneToMidpointMap.put("Cam 2 1080 2,1", new Point(108, 86));
            slotOverlayMap.get("Cam21080").add("Cam 2 1080 2,2");
            getSceneToRectMap().put("Cam 2 1080 2,2", new Rectangle(62, 28, 206, 116));
            sceneToMidpointMap.put("Cam 2 1080 2,2", new Point(165, 86));
            slotOverlayMap.get("Cam21080").add("Cam 2 1080 2,3");
            getSceneToRectMap().put("Cam 2 1080 2,3", new Rectangle(108, 28, 206, 116));
            sceneToMidpointMap.put("Cam 2 1080 2,3", new Point(211, 86));
            slotOverlayMap.get("Cam21080").add("Cam 2 1080 2,4");
            getSceneToRectMap().put("Cam 2 1080 2,4", new Rectangle(165, 28, 206, 116));
            sceneToMidpointMap.put("Cam 2 1080 2,4", new Point(268, 86));
            slotOverlayMap.get("Cam21080").add("Cam 2 1080 2,5");
            getSceneToRectMap().put("Cam 2 1080 2,5", new Rectangle(222, 28, 204, 116));
            sceneToMidpointMap.put("Cam 2 1080 2,5", new Point(324, 86));
            slotOverlayMap.get("Cam21080").add("Cam 2 1080 3,1");
            getSceneToRectMap().put("Cam 2 1080 3,1", new Rectangle(5, 63, 206, 115));
            sceneToMidpointMap.put("Cam 2 1080 3,1", new Point(108, 120));
            slotOverlayMap.get("Cam21080").add("Cam 2 1080 3,2");
            getSceneToRectMap().put("Cam 2 1080 3,2", new Rectangle(62, 63, 206, 115));
            sceneToMidpointMap.put("Cam 2 1080 3,2", new Point(165, 120));
            slotOverlayMap.get("Cam21080").add("Cam 2 1080 3,3");
            getSceneToRectMap().put("Cam 2 1080 3,3", new Rectangle(108, 63, 206, 115));
            sceneToMidpointMap.put("Cam 2 1080 3,3", new Point(211, 120));
            slotOverlayMap.get("Cam21080").add("Cam 2 1080 3,4");
            getSceneToRectMap().put("Cam 2 1080 3,4", new Rectangle(165, 63, 206, 115));
            sceneToMidpointMap.put("Cam 2 1080 3,4", new Point(268, 120));
            slotOverlayMap.get("Cam21080").add("Cam 2 1080 3,5");
            getSceneToRectMap().put("Cam 2 1080 3,5", new Rectangle(222, 63, 204, 115));
            sceneToMidpointMap.put("Cam 2 1080 3,5", new Point(324, 120));
            slotOverlayMap.get("Cam21080").add("Cam 2 1080 4,1");
            getSceneToRectMap().put("Cam 2 1080 4,1", new Rectangle(5, 98, 206, 104));
            sceneToMidpointMap.put("Cam 2 1080 4,1", new Point(108, 150));
            slotOverlayMap.get("Cam21080").add("Cam 2 1080 4,2");
            getSceneToRectMap().put("Cam 2 1080 4,2", new Rectangle(62, 98, 206, 104));
            sceneToMidpointMap.put("Cam 2 1080 4,2", new Point(165, 150));
            slotOverlayMap.get("Cam21080").add("Cam 2 1080 4,3");
            getSceneToRectMap().put("Cam 2 1080 4,3", new Rectangle(108, 98, 206, 104));
            sceneToMidpointMap.put("Cam 2 1080 4,3", new Point(211, 150));
            slotOverlayMap.get("Cam21080").add("Cam 2 1080 4,4");
            getSceneToRectMap().put("Cam 2 1080 4,4", new Rectangle(165, 98, 206, 104));
            sceneToMidpointMap.put("Cam 2 1080 4,4", new Point(268, 150));
            slotOverlayMap.get("Cam21080").add("Cam 2 1080 4,5");
            getSceneToRectMap().put("Cam 2 1080 4,5", new Rectangle(222, 98, 204, 104));
            sceneToMidpointMap.put("Cam 2 1080 4,5", new Point(324, 150));
            slotOverlayMap.get("Cam21080").add("Cam 2 1080 5,1");
            getSceneToRectMap().put("Cam 2 1080 5,1", new Rectangle(5, 121, 206, 114));
            sceneToMidpointMap.put("Cam 2 1080 5,1", new Point(108, 178));
            slotOverlayMap.get("Cam21080").add("Cam 2 1080 5,2");
            getSceneToRectMap().put("Cam 2 1080 5,2", new Rectangle(62, 121, 206, 114));
            sceneToMidpointMap.put("Cam 2 1080 5,2", new Point(165, 178));
            slotOverlayMap.get("Cam21080").add("Cam 2 1080 5,3");
            getSceneToRectMap().put("Cam 2 1080 5,3", new Rectangle(108, 121, 206, 114));
            sceneToMidpointMap.put("Cam 2 1080 5,3", new Point(211, 178));
            slotOverlayMap.get("Cam21080").add("Cam 2 1080 5,4");
            getSceneToRectMap().put("Cam 2 1080 5,4", new Rectangle(165, 121, 206, 114));
            sceneToMidpointMap.put("Cam 2 1080 5,4", new Point(268, 178));
            slotOverlayMap.get("Cam21080").add("Cam 2 1080 5,5");
            getSceneToRectMap().put("Cam 2 1080 5,5", new Rectangle(222, 121, 204, 114));
            sceneToMidpointMap.put("Cam 2 1080 5,5", new Point(324, 178));
            slotOverlayMap.put("Cam21296", new ArrayList<String>());
            slotOverlayMap.get("Cam21296").add("Cam 2 1296 1,1");
            getSceneToRectMap().put("Cam 2 1296 1,1", new Rectangle(5, 5, 263, 139));
            sceneToMidpointMap.put("Cam 2 1296 1,1", new Point(136, 74));
            slotOverlayMap.get("Cam21296").add("Cam 2 1296 1,2");
            getSceneToRectMap().put("Cam 2 1296 1,2", new Rectangle(62, 5, 252, 139));
            sceneToMidpointMap.put("Cam 2 1296 1,2", new Point(188, 74));
            slotOverlayMap.get("Cam21296").add("Cam 2 1296 1,3");
            getSceneToRectMap().put("Cam 2 1296 1,3", new Rectangle(108, 5, 263, 139));
            sceneToMidpointMap.put("Cam 2 1296 1,3", new Point(239, 74));
            slotOverlayMap.get("Cam21296").add("Cam 2 1296 1,4");
            getSceneToRectMap().put("Cam 2 1296 1,4", new Rectangle(165, 5, 261, 139));
            sceneToMidpointMap.put("Cam 2 1296 1,4", new Point(295, 74));
            slotOverlayMap.get("Cam21296").add("Cam 2 1296 2,1");
            getSceneToRectMap().put("Cam 2 1296 2,1", new Rectangle(5, 40, 263, 138));
            sceneToMidpointMap.put("Cam 2 1296 2,1", new Point(136, 109));
            slotOverlayMap.get("Cam21296").add("Cam 2 1296 2,2");
            getSceneToRectMap().put("Cam 2 1296 2,2", new Rectangle(62, 28, 252, 150));
            sceneToMidpointMap.put("Cam 2 1296 2,2", new Point(188, 103));
            slotOverlayMap.get("Cam21296").add("Cam 2 1296 2,3");
            getSceneToRectMap().put("Cam 2 1296 2,3", new Rectangle(108, 40, 263, 138));
            sceneToMidpointMap.put("Cam 2 1296 2,3", new Point(239, 109));
            slotOverlayMap.get("Cam21296").add("Cam 2 1296 2,4");
            getSceneToRectMap().put("Cam 2 1296 2,4", new Rectangle(165, 40, 261, 138));
            sceneToMidpointMap.put("Cam 2 1296 2,4", new Point(295, 109));
            slotOverlayMap.get("Cam21296").add("Cam 2 1296 3,1");
            getSceneToRectMap().put("Cam 2 1296 3,1", new Rectangle(5, 63, 263, 139));
            sceneToMidpointMap.put("Cam 2 1296 3,1", new Point(136, 132));
            slotOverlayMap.get("Cam21296").add("Cam 2 1296 3,2");
            getSceneToRectMap().put("Cam 2 1296 3,2", new Rectangle(62, 63, 252, 139));
            sceneToMidpointMap.put("Cam 2 1296 3,2", new Point(188, 132));
            slotOverlayMap.get("Cam21296").add("Cam 2 1296 3,3");
            getSceneToRectMap().put("Cam 2 1296 3,3", new Rectangle(108, 63, 263, 139));
            sceneToMidpointMap.put("Cam 2 1296 3,3", new Point(239, 132));
            slotOverlayMap.get("Cam21296").add("Cam 2 1296 3,4");
            getSceneToRectMap().put("Cam 2 1296 3,4", new Rectangle(165, 63, 261, 139));
            sceneToMidpointMap.put("Cam 2 1296 3,4", new Point(295, 132));
            slotOverlayMap.get("Cam21296").add("Cam 2 1296 4,1");
            getSceneToRectMap().put("Cam 2 1296 4,1", new Rectangle(5, 98, 263, 137));
            sceneToMidpointMap.put("Cam 2 1296 4,1", new Point(136, 166));
            slotOverlayMap.get("Cam21296").add("Cam 2 1296 4,2");
            getSceneToRectMap().put("Cam 2 1296 4,2", new Rectangle(62, 98, 252, 137));
            sceneToMidpointMap.put("Cam 2 1296 4,2", new Point(188, 166));
            slotOverlayMap.get("Cam21296").add("Cam 2 1296 4,3");
            getSceneToRectMap().put("Cam 2 1296 4,3", new Rectangle(108, 98, 263, 137));
            sceneToMidpointMap.put("Cam 2 1296 4,3", new Point(239, 166));
            slotOverlayMap.get("Cam21296").add("Cam 2 1296 4,4");
            getSceneToRectMap().put("Cam 2 1296 4,4", new Rectangle(165, 98, 261, 137));
            sceneToMidpointMap.put("Cam 2 1296 4,4", new Point(295, 166));
            slotOverlayMap.put("Cam21512", new ArrayList<String>());
            slotOverlayMap.get("Cam21512").add("Cam 2 1512 1,1");
            getSceneToRectMap().put("Cam 2 1512 1,1", new Rectangle(5, 5, 309, 173));
            sceneToMidpointMap.put("Cam 2 1512 1,1", new Point(159, 91));
            slotOverlayMap.get("Cam21512").add("Cam 2 1512 1,2");
            getSceneToRectMap().put("Cam 2 1512 1,2", new Rectangle(62, 5, 309, 173));
            sceneToMidpointMap.put("Cam 2 1512 1,2", new Point(216, 91));
            slotOverlayMap.get("Cam21512").add("Cam 2 1512 1,3");
            getSceneToRectMap().put("Cam 2 1512 1,3", new Rectangle(108, 5, 318, 173));
            sceneToMidpointMap.put("Cam 2 1512 1,3", new Point(267, 91));
            slotOverlayMap.get("Cam21512").add("Cam 2 1512 2,1");
            getSceneToRectMap().put("Cam 2 1512 2,1", new Rectangle(5, 40, 309, 162));
            sceneToMidpointMap.put("Cam 2 1512 2,1", new Point(159, 121));
            slotOverlayMap.get("Cam21512").add("Cam 2 1512 2,2");
            getSceneToRectMap().put("Cam 2 1512 2,2", new Rectangle(62, 40, 309, 162));
            sceneToMidpointMap.put("Cam 2 1512 2,2", new Point(216, 121));
            slotOverlayMap.get("Cam21512").add("Cam 2 1512 2,3");
            getSceneToRectMap().put("Cam 2 1512 2,3", new Rectangle(108, 40, 318, 162));
            sceneToMidpointMap.put("Cam 2 1512 2,3", new Point(267, 121));
            slotOverlayMap.get("Cam21512").add("Cam 2 1512 3,1");
            getSceneToRectMap().put("Cam 2 1512 3,1", new Rectangle(5, 63, 309, 172));
            sceneToMidpointMap.put("Cam 2 1512 3,1", new Point(159, 149));
            slotOverlayMap.get("Cam21512").add("Cam 2 1512 3,2");
            getSceneToRectMap().put("Cam 2 1512 3,2", new Rectangle(62, 63, 309, 172));
            sceneToMidpointMap.put("Cam 2 1512 3,2", new Point(216, 149));
            slotOverlayMap.get("Cam21512").add("Cam 2 1512 3,3");
            getSceneToRectMap().put("Cam 2 1512 3,3", new Rectangle(108, 63, 318, 172));
            sceneToMidpointMap.put("Cam 2 1512 3,3", new Point(267, 149));
            slotOverlayMap.put("Cam21728", new ArrayList<String>());
            slotOverlayMap.get("Cam21728").add("Cam 2 1728 1,1");
            getSceneToRectMap().put("Cam 2 1728 1,1", new Rectangle(5, 5, 366, 197));
            sceneToMidpointMap.put("Cam 2 1728 1,1", new Point(188, 103));
            slotOverlayMap.get("Cam21728").add("Cam 2 1728 1,2");
            getSceneToRectMap().put("Cam 2 1728 1,2", new Rectangle(62, 5, 364, 197));
            sceneToMidpointMap.put("Cam 2 1728 1,2", new Point(244, 103));
            slotOverlayMap.get("Cam21728").add("Cam 2 1728 2,1");
            getSceneToRectMap().put("Cam 2 1728 2,1", new Rectangle(5, 40, 366, 195));
            sceneToMidpointMap.put("Cam 2 1728 2,1", new Point(188, 137));
            slotOverlayMap.get("Cam21728").add("Cam 2 1728 2,2");
            getSceneToRectMap().put("Cam 2 1728 2,2", new Rectangle(62, 40, 364, 195));
            sceneToMidpointMap.put("Cam 2 1728 2,2", new Point(244, 137));
            slotOverlayMap.put("Cam21944", new ArrayList<String>());
            slotOverlayMap.get("Cam21944").add("Cam 2 1944 1,1");
            getSceneToRectMap().put("Cam 2 1944 1,1", new Rectangle(5, 5, 411, 230));
            sceneToMidpointMap.put("Cam 2 1944 1,1", new Point(210, 120));
            slotOverlayMap.put("Cam2Slides1080", new ArrayList<String>());
            slotOverlayMap.get("Cam2Slides1080").add("Cam 2 Slides 1080 1,1");
            getSceneToRectMap().put("Cam 2 Slides 1080 1,1", new Rectangle(5, 5, 149, 104));
            sceneToMidpointMap.put("Cam 2 Slides 1080 1,1", new Point(79, 57));
            slotOverlayMap.get("Cam2Slides1080").add("Cam 2 Slides 1080 1,2");
            getSceneToRectMap().put("Cam 2 Slides 1080 1,2", new Rectangle(51, 5, 160, 104));
            sceneToMidpointMap.put("Cam 2 Slides 1080 1,2", new Point(131, 57));
            slotOverlayMap.get("Cam2Slides1080").add("Cam 2 Slides 1080 1,3");
            getSceneToRectMap().put("Cam 2 Slides 1080 1,3", new Rectangle(108, 5, 160, 104));
            sceneToMidpointMap.put("Cam 2 Slides 1080 1,3", new Point(188, 57));
            slotOverlayMap.get("Cam2Slides1080").add("Cam 2 Slides 1080 1,4");
            getSceneToRectMap().put("Cam 2 Slides 1080 1,4", new Rectangle(165, 5, 149, 104));
            sceneToMidpointMap.put("Cam 2 Slides 1080 1,4", new Point(239, 57));
            slotOverlayMap.get("Cam2Slides1080").add("Cam 2 Slides 1080 1,5");
            getSceneToRectMap().put("Cam 2 Slides 1080 1,5", new Rectangle(211, 5, 160, 104));
            sceneToMidpointMap.put("Cam 2 Slides 1080 1,5", new Point(291, 57));
            slotOverlayMap.get("Cam2Slides1080").add("Cam 2 Slides 1080 1,6");
            getSceneToRectMap().put("Cam 2 Slides 1080 1,6", new Rectangle(268, 5, 158, 104));
            sceneToMidpointMap.put("Cam 2 Slides 1080 1,6", new Point(347, 57));
            slotOverlayMap.get("Cam2Slides1080").add("Cam 2 Slides 1080 2,1");
            getSceneToRectMap().put("Cam 2 Slides 1080 2,1", new Rectangle(5, 28, 149, 116));
            sceneToMidpointMap.put("Cam 2 Slides 1080 2,1", new Point(79, 86));
            slotOverlayMap.get("Cam2Slides1080").add("Cam 2 Slides 1080 2,2");
            getSceneToRectMap().put("Cam 2 Slides 1080 2,2", new Rectangle(51, 28, 160, 116));
            sceneToMidpointMap.put("Cam 2 Slides 1080 2,2", new Point(131, 86));
            slotOverlayMap.get("Cam2Slides1080").add("Cam 2 Slides 1080 2,3");
            getSceneToRectMap().put("Cam 2 Slides 1080 2,3", new Rectangle(108, 28, 160, 116));
            sceneToMidpointMap.put("Cam 2 Slides 1080 2,3", new Point(188, 86));
            slotOverlayMap.get("Cam2Slides1080").add("Cam 2 Slides 1080 2,4");
            getSceneToRectMap().put("Cam 2 Slides 1080 2,4", new Rectangle(165, 28, 149, 116));
            sceneToMidpointMap.put("Cam 2 Slides 1080 2,4", new Point(239, 86));
            slotOverlayMap.get("Cam2Slides1080").add("Cam 2 Slides 1080 2,5");
            getSceneToRectMap().put("Cam 2 Slides 1080 2,5", new Rectangle(211, 28, 160, 116));
            sceneToMidpointMap.put("Cam 2 Slides 1080 2,5", new Point(291, 86));
            slotOverlayMap.get("Cam2Slides1080").add("Cam 2 Slides 1080 2,6");
            getSceneToRectMap().put("Cam 2 Slides 1080 2,6", new Rectangle(268, 28, 158, 116));
            sceneToMidpointMap.put("Cam 2 Slides 1080 2,6", new Point(347, 86));
            slotOverlayMap.get("Cam2Slides1080").add("Cam 2 Slides 1080 3,1");
            getSceneToRectMap().put("Cam 2 Slides 1080 3,1", new Rectangle(5, 63, 149, 115));
            sceneToMidpointMap.put("Cam 2 Slides 1080 3,1", new Point(79, 120));
            slotOverlayMap.get("Cam2Slides1080").add("Cam 2 Slides 1080 3,2");
            getSceneToRectMap().put("Cam 2 Slides 1080 3,2", new Rectangle(51, 63, 160, 115));
            sceneToMidpointMap.put("Cam 2 Slides 1080 3,2", new Point(131, 120));
            slotOverlayMap.get("Cam2Slides1080").add("Cam 2 Slides 1080 3,3");
            getSceneToRectMap().put("Cam 2 Slides 1080 3,3", new Rectangle(108, 63, 160, 115));
            sceneToMidpointMap.put("Cam 2 Slides 1080 3,3", new Point(188, 120));
            slotOverlayMap.get("Cam2Slides1080").add("Cam 2 Slides 1080 3,4");
            getSceneToRectMap().put("Cam 2 Slides 1080 3,4", new Rectangle(165, 63, 149, 115));
            sceneToMidpointMap.put("Cam 2 Slides 1080 3,4", new Point(239, 120));
            slotOverlayMap.get("Cam2Slides1080").add("Cam 2 Slides 1080 3,5");
            getSceneToRectMap().put("Cam 2 Slides 1080 3,5", new Rectangle(211, 63, 160, 115));
            sceneToMidpointMap.put("Cam 2 Slides 1080 3,5", new Point(291, 120));
            slotOverlayMap.get("Cam2Slides1080").add("Cam 2 Slides 1080 3,6");
            getSceneToRectMap().put("Cam 2 Slides 1080 3,6", new Rectangle(268, 63, 158, 115));
            sceneToMidpointMap.put("Cam 2 Slides 1080 3,6", new Point(347, 120));
            slotOverlayMap.get("Cam2Slides1080").add("Cam 2 Slides 1080 4,1");
            getSceneToRectMap().put("Cam 2 Slides 1080 4,1", new Rectangle(5, 86, 149, 116));
            sceneToMidpointMap.put("Cam 2 Slides 1080 4,1", new Point(79, 144));
            slotOverlayMap.get("Cam2Slides1080").add("Cam 2 Slides 1080 4,2");
            getSceneToRectMap().put("Cam 2 Slides 1080 4,2", new Rectangle(51, 98, 160, 104));
            sceneToMidpointMap.put("Cam 2 Slides 1080 4,2", new Point(131, 150));
            slotOverlayMap.get("Cam2Slides1080").add("Cam 2 Slides 1080 4,3");
            getSceneToRectMap().put("Cam 2 Slides 1080 4,3", new Rectangle(108, 98, 160, 104));
            sceneToMidpointMap.put("Cam 2 Slides 1080 4,3", new Point(188, 150));
            slotOverlayMap.get("Cam2Slides1080").add("Cam 2 Slides 1080 4,4");
            getSceneToRectMap().put("Cam 2 Slides 1080 4,4", new Rectangle(165, 98, 149, 104));
            sceneToMidpointMap.put("Cam 2 Slides 1080 4,4", new Point(239, 150));
            slotOverlayMap.get("Cam2Slides1080").add("Cam 2 Slides 1080 4,5");
            getSceneToRectMap().put("Cam 2 Slides 1080 4,5", new Rectangle(211, 98, 160, 104));
            sceneToMidpointMap.put("Cam 2 Slides 1080 4,5", new Point(291, 150));
            slotOverlayMap.get("Cam2Slides1080").add("Cam 2 Slides 1080 4,6");
            getSceneToRectMap().put("Cam 2 Slides 1080 4,6", new Rectangle(268, 98, 158, 104));
            sceneToMidpointMap.put("Cam 2 Slides 1080 4,6", new Point(347, 150));
            slotOverlayMap.get("Cam2Slides1080").add("Cam 2 Slides 1080 5,1");
            getSceneToRectMap().put("Cam 2 Slides 1080 5,1", new Rectangle(5, 121, 149, 114));
            sceneToMidpointMap.put("Cam 2 Slides 1080 5,1", new Point(79, 178));
            slotOverlayMap.get("Cam2Slides1080").add("Cam 2 Slides 1080 5,2");
            getSceneToRectMap().put("Cam 2 Slides 1080 5,2", new Rectangle(51, 121, 160, 114));
            sceneToMidpointMap.put("Cam 2 Slides 1080 5,2", new Point(131, 178));
            slotOverlayMap.get("Cam2Slides1080").add("Cam 2 Slides 1080 5,3");
            getSceneToRectMap().put("Cam 2 Slides 1080 5,3", new Rectangle(108, 121, 160, 114));
            sceneToMidpointMap.put("Cam 2 Slides 1080 5,3", new Point(188, 178));
            slotOverlayMap.get("Cam2Slides1080").add("Cam 2 Slides 1080 5,4");
            getSceneToRectMap().put("Cam 2 Slides 1080 5,4", new Rectangle(165, 121, 149, 114));
            sceneToMidpointMap.put("Cam 2 Slides 1080 5,4", new Point(239, 178));
            slotOverlayMap.get("Cam2Slides1080").add("Cam 2 Slides 1080 5,5");
            getSceneToRectMap().put("Cam 2 Slides 1080 5,5", new Rectangle(211, 121, 160, 114));
            sceneToMidpointMap.put("Cam 2 Slides 1080 5,5", new Point(291, 178));
            slotOverlayMap.get("Cam2Slides1080").add("Cam 2 Slides 1080 5,6");
            getSceneToRectMap().put("Cam 2 Slides 1080 5,6", new Rectangle(268, 121, 158, 114));
            sceneToMidpointMap.put("Cam 2 Slides 1080 5,6", new Point(347, 178));
            slotOverlayMap.put("Cam2Slides1296", new ArrayList<String>());
            slotOverlayMap.get("Cam2Slides1296").add("Cam 2 Slides 1296 1,1");
            getSceneToRectMap().put("Cam 2 Slides 1296 1,1", new Rectangle(5, 5, 194, 139));
            sceneToMidpointMap.put("Cam 2 Slides 1296 1,1", new Point(102, 74));
            slotOverlayMap.get("Cam2Slides1296").add("Cam 2 Slides 1296 1,2");
            getSceneToRectMap().put("Cam 2 Slides 1296 1,2", new Rectangle(51, 5, 205, 139));
            sceneToMidpointMap.put("Cam 2 Slides 1296 1,2", new Point(153, 74));
            slotOverlayMap.get("Cam2Slides1296").add("Cam 2 Slides 1296 1,3");
            getSceneToRectMap().put("Cam 2 Slides 1296 1,3", new Rectangle(108, 5, 206, 139));
            sceneToMidpointMap.put("Cam 2 Slides 1296 1,3", new Point(211, 74));
            slotOverlayMap.get("Cam2Slides1296").add("Cam 2 Slides 1296 1,4");
            getSceneToRectMap().put("Cam 2 Slides 1296 1,4", new Rectangle(176, 5, 195, 139));
            sceneToMidpointMap.put("Cam 2 Slides 1296 1,4", new Point(273, 74));
            slotOverlayMap.get("Cam2Slides1296").add("Cam 2 Slides 1296 1,5");
            getSceneToRectMap().put("Cam 2 Slides 1296 1,5", new Rectangle(234, 5, 192, 139));
            sceneToMidpointMap.put("Cam 2 Slides 1296 1,5", new Point(330, 74));
            slotOverlayMap.get("Cam2Slides1296").add("Cam 2 Slides 1296 2,1");
            getSceneToRectMap().put("Cam 2 Slides 1296 2,1", new Rectangle(5, 28, 194, 150));
            sceneToMidpointMap.put("Cam 2 Slides 1296 2,1", new Point(102, 103));
            slotOverlayMap.get("Cam2Slides1296").add("Cam 2 Slides 1296 2,2");
            getSceneToRectMap().put("Cam 2 Slides 1296 2,2", new Rectangle(51, 28, 205, 150));
            sceneToMidpointMap.put("Cam 2 Slides 1296 2,2", new Point(153, 103));
            slotOverlayMap.get("Cam2Slides1296").add("Cam 2 Slides 1296 2,3");
            getSceneToRectMap().put("Cam 2 Slides 1296 2,3", new Rectangle(108, 28, 206, 150));
            sceneToMidpointMap.put("Cam 2 Slides 1296 2,3", new Point(211, 103));
            slotOverlayMap.get("Cam2Slides1296").add("Cam 2 Slides 1296 2,4");
            getSceneToRectMap().put("Cam 2 Slides 1296 2,4", new Rectangle(176, 28, 195, 150));
            sceneToMidpointMap.put("Cam 2 Slides 1296 2,4", new Point(273, 103));
            slotOverlayMap.get("Cam2Slides1296").add("Cam 2 Slides 1296 2,5");
            getSceneToRectMap().put("Cam 2 Slides 1296 2,5", new Rectangle(234, 28, 192, 150));
            sceneToMidpointMap.put("Cam 2 Slides 1296 2,5", new Point(330, 103));
            slotOverlayMap.get("Cam2Slides1296").add("Cam 2 Slides 1296 3,1");
            getSceneToRectMap().put("Cam 2 Slides 1296 3,1", new Rectangle(5, 63, 194, 139));
            sceneToMidpointMap.put("Cam 2 Slides 1296 3,1", new Point(102, 132));
            slotOverlayMap.get("Cam2Slides1296").add("Cam 2 Slides 1296 3,2");
            getSceneToRectMap().put("Cam 2 Slides 1296 3,2", new Rectangle(51, 63, 205, 139));
            sceneToMidpointMap.put("Cam 2 Slides 1296 3,2", new Point(153, 132));
            slotOverlayMap.get("Cam2Slides1296").add("Cam 2 Slides 1296 3,3");
            getSceneToRectMap().put("Cam 2 Slides 1296 3,3", new Rectangle(108, 63, 206, 139));
            sceneToMidpointMap.put("Cam 2 Slides 1296 3,3", new Point(211, 132));
            slotOverlayMap.get("Cam2Slides1296").add("Cam 2 Slides 1296 3,4");
            getSceneToRectMap().put("Cam 2 Slides 1296 3,4", new Rectangle(176, 63, 195, 139));
            sceneToMidpointMap.put("Cam 2 Slides 1296 3,4", new Point(273, 132));
            slotOverlayMap.get("Cam2Slides1296").add("Cam 2 Slides 1296 3,5");
            getSceneToRectMap().put("Cam 2 Slides 1296 3,5", new Rectangle(234, 63, 192, 139));
            sceneToMidpointMap.put("Cam 2 Slides 1296 3,5", new Point(330, 132));
            slotOverlayMap.get("Cam2Slides1296").add("Cam 2 Slides 1296 4,1");
            getSceneToRectMap().put("Cam 2 Slides 1296 4,1", new Rectangle(5, 98, 194, 137));
            sceneToMidpointMap.put("Cam 2 Slides 1296 4,1", new Point(102, 166));
            slotOverlayMap.get("Cam2Slides1296").add("Cam 2 Slides 1296 4,2");
            getSceneToRectMap().put("Cam 2 Slides 1296 4,2", new Rectangle(51, 98, 205, 137));
            sceneToMidpointMap.put("Cam 2 Slides 1296 4,2", new Point(153, 166));
            slotOverlayMap.get("Cam2Slides1296").add("Cam 2 Slides 1296 4,3");
            getSceneToRectMap().put("Cam 2 Slides 1296 4,3", new Rectangle(108, 98, 206, 137));
            sceneToMidpointMap.put("Cam 2 Slides 1296 4,3", new Point(211, 166));
            slotOverlayMap.get("Cam2Slides1296").add("Cam 2 Slides 1296 4,4");
            getSceneToRectMap().put("Cam 2 Slides 1296 4,4", new Rectangle(176, 98, 195, 137));
            sceneToMidpointMap.put("Cam 2 Slides 1296 4,4", new Point(273, 166));
            slotOverlayMap.get("Cam2Slides1296").add("Cam 2 Slides 1296 4,5");
            getSceneToRectMap().put("Cam 2 Slides 1296 4,5", new Rectangle(234, 98, 192, 137));
            sceneToMidpointMap.put("Cam 2 Slides 1296 4,5", new Point(330, 166));
            slotOverlayMap.put("Cam2Slides1512", new ArrayList<String>());
            slotOverlayMap.get("Cam2Slides1512").add("Cam 2 Slides 1512 1,1");
            getSceneToRectMap().put("Cam 2 Slides 1512 1,1", new Rectangle(5, 5, 229, 173));
            sceneToMidpointMap.put("Cam 2 Slides 1512 1,1", new Point(119, 91));
            slotOverlayMap.get("Cam2Slides1512").add("Cam 2 Slides 1512 1,2");
            getSceneToRectMap().put("Cam 2 Slides 1512 1,2", new Rectangle(51, 5, 240, 173));
            sceneToMidpointMap.put("Cam 2 Slides 1512 1,2", new Point(171, 91));
            slotOverlayMap.get("Cam2Slides1512").add("Cam 2 Slides 1512 1,3");
            getSceneToRectMap().put("Cam 2 Slides 1512 1,3", new Rectangle(96, 5, 229, 173));
            sceneToMidpointMap.put("Cam 2 Slides 1512 1,3", new Point(210, 91));
            slotOverlayMap.get("Cam2Slides1512").add("Cam 2 Slides 1512 1,4");
            getSceneToRectMap().put("Cam 2 Slides 1512 1,4", new Rectangle(131, 5, 240, 173));
            sceneToMidpointMap.put("Cam 2 Slides 1512 1,4", new Point(251, 91));
            slotOverlayMap.get("Cam2Slides1512").add("Cam 2 Slides 1512 1,5");
            getSceneToRectMap().put("Cam 2 Slides 1512 1,5", new Rectangle(188, 5, 238, 173));
            sceneToMidpointMap.put("Cam 2 Slides 1512 1,5", new Point(307, 91));
            slotOverlayMap.get("Cam2Slides1512").add("Cam 2 Slides 1512 2,1");
            getSceneToRectMap().put("Cam 2 Slides 1512 2,1", new Rectangle(5, 28, 229, 174));
            sceneToMidpointMap.put("Cam 2 Slides 1512 2,1", new Point(119, 115));
            slotOverlayMap.get("Cam2Slides1512").add("Cam 2 Slides 1512 2,2");
            getSceneToRectMap().put("Cam 2 Slides 1512 2,2", new Rectangle(51, 28, 240, 174));
            sceneToMidpointMap.put("Cam 2 Slides 1512 2,2", new Point(171, 115));
            slotOverlayMap.get("Cam2Slides1512").add("Cam 2 Slides 1512 2,3");
            getSceneToRectMap().put("Cam 2 Slides 1512 2,3", new Rectangle(96, 28, 229, 174));
            sceneToMidpointMap.put("Cam 2 Slides 1512 2,3", new Point(210, 115));
            slotOverlayMap.get("Cam2Slides1512").add("Cam 2 Slides 1512 2,4");
            getSceneToRectMap().put("Cam 2 Slides 1512 2,4", new Rectangle(131, 28, 240, 174));
            sceneToMidpointMap.put("Cam 2 Slides 1512 2,4", new Point(251, 115));
            slotOverlayMap.get("Cam2Slides1512").add("Cam 2 Slides 1512 2,5");
            getSceneToRectMap().put("Cam 2 Slides 1512 2,5", new Rectangle(188, 28, 238, 174));
            sceneToMidpointMap.put("Cam 2 Slides 1512 2,5", new Point(307, 115));
            slotOverlayMap.get("Cam2Slides1512").add("Cam 2 Slides 1512 3,1");
            getSceneToRectMap().put("Cam 2 Slides 1512 3,1", new Rectangle(5, 63, 229, 172));
            sceneToMidpointMap.put("Cam 2 Slides 1512 3,1", new Point(119, 149));
            slotOverlayMap.get("Cam2Slides1512").add("Cam 2 Slides 1512 3,2");
            getSceneToRectMap().put("Cam 2 Slides 1512 3,2", new Rectangle(51, 63, 240, 172));
            sceneToMidpointMap.put("Cam 2 Slides 1512 3,2", new Point(171, 149));
            slotOverlayMap.get("Cam2Slides1512").add("Cam 2 Slides 1512 3,3");
            getSceneToRectMap().put("Cam 2 Slides 1512 3,3", new Rectangle(96, 63, 229, 172));
            sceneToMidpointMap.put("Cam 2 Slides 1512 3,3", new Point(210, 149));
            slotOverlayMap.get("Cam2Slides1512").add("Cam 2 Slides 1512 3,4");
            getSceneToRectMap().put("Cam 2 Slides 1512 3,4", new Rectangle(131, 63, 240, 172));
            sceneToMidpointMap.put("Cam 2 Slides 1512 3,4", new Point(251, 149));
            slotOverlayMap.get("Cam2Slides1512").add("Cam 2 Slides 1512 3,5");
            getSceneToRectMap().put("Cam 2 Slides 1512 3,5", new Rectangle(186, 63, 240, 172));
            sceneToMidpointMap.put("Cam 2 Slides 1512 3,5", new Point(306, 149));
            slotOverlayMap.put("Cam2Slides1728", new ArrayList<String>());
            slotOverlayMap.get("Cam2Slides1728").add("Cam 2 Slides 1728 1,1");
            getSceneToRectMap().put("Cam 2 Slides 1728 1,1", new Rectangle(5, 5, 274, 197));
            sceneToMidpointMap.put("Cam 2 Slides 1728 1,1", new Point(142, 103));
            slotOverlayMap.get("Cam2Slides1728").add("Cam 2 Slides 1728 1,2");
            getSceneToRectMap().put("Cam 2 Slides 1728 1,2", new Rectangle(51, 5, 274, 197));
            sceneToMidpointMap.put("Cam 2 Slides 1728 1,2", new Point(188, 103));
            slotOverlayMap.get("Cam2Slides1728").add("Cam 2 Slides 1728 1,3");
            getSceneToRectMap().put("Cam 2 Slides 1728 1,3", new Rectangle(96, 5, 275, 197));
            sceneToMidpointMap.put("Cam 2 Slides 1728 1,3", new Point(233, 103));
            slotOverlayMap.get("Cam2Slides1728").add("Cam 2 Slides 1728 1,4");
            getSceneToRectMap().put("Cam 2 Slides 1728 1,4", new Rectangle(154, 5, 272, 197));
            sceneToMidpointMap.put("Cam 2 Slides 1728 1,4", new Point(290, 103));
            slotOverlayMap.get("Cam2Slides1728").add("Cam 2 Slides 1728 2,1");
            getSceneToRectMap().put("Cam 2 Slides 1728 2,1", new Rectangle(5, 40, 274, 195));
            sceneToMidpointMap.put("Cam 2 Slides 1728 2,1", new Point(142, 137));
            slotOverlayMap.get("Cam2Slides1728").add("Cam 2 Slides 1728 2,2");
            getSceneToRectMap().put("Cam 2 Slides 1728 2,2", new Rectangle(51, 40, 274, 195));
            sceneToMidpointMap.put("Cam 2 Slides 1728 2,2", new Point(188, 137));
            slotOverlayMap.get("Cam2Slides1728").add("Cam 2 Slides 1728 2,3");
            getSceneToRectMap().put("Cam 2 Slides 1728 2,3", new Rectangle(96, 40, 275, 195));
            sceneToMidpointMap.put("Cam 2 Slides 1728 2,3", new Point(233, 137));
            slotOverlayMap.get("Cam2Slides1728").add("Cam 2 Slides 1728 2,4");
            getSceneToRectMap().put("Cam 2 Slides 1728 2,4", new Rectangle(154, 40, 272, 195));
            sceneToMidpointMap.put("Cam 2 Slides 1728 2,4", new Point(290, 137));
            slotOverlayMap.put("Cam2Slides1944", new ArrayList<String>());
            slotOverlayMap.get("Cam2Slides1944").add("Cam 2 Slides 1944 1,1");
            getSceneToRectMap().put("Cam 2 Slides 1944 1,1", new Rectangle(5, 5, 309, 230));
            sceneToMidpointMap.put("Cam 2 Slides 1944 1,1", new Point(159, 120));
            slotOverlayMap.get("Cam2Slides1944").add("Cam 2 Slides 1944 1,2");
            getSceneToRectMap().put("Cam 2 Slides 1944 1,2", new Rectangle(62, 5, 309, 230));
            sceneToMidpointMap.put("Cam 2 Slides 1944 1,2", new Point(216, 120));
            slotOverlayMap.get("Cam2Slides1944").add("Cam 2 Slides 1944 1,3");
            getSceneToRectMap().put("Cam 2 Slides 1944 1,3", new Rectangle(108, 5, 318, 230));
            sceneToMidpointMap.put("Cam 2 Slides 1944 1,3", new Point(267, 120));
        }

        @Override
        protected void changeToScene(String scene) {
            ObsAutomationTwo.this.changeToScene(scene);
        }
    };

    private SlotPanel fourthSlotPanel = new SlotPanel() {
        @Override
        protected void codeFromObsAutomationUtility() {
            slotThumbRect = new Rectangle(699, 276, 212, 117);

            slotOverlayMap.put("SD11080", new ArrayList<String>());
            slotOverlayMap.get("SD11080").add("SD 1 1080 1,1");
            getSceneToRectMap().put("SD 1 1080 1,1", new Rectangle(5, 5, 411, 230));
            sceneToMidpointMap.put("SD 1 1080 1,1", new Point(210, 120));
            slotOverlayMap.put("SD1Slides1080", new ArrayList<String>());
            slotOverlayMap.get("SD1Slides1080").add("SD 1 Slides 1080 1,1");
            getSceneToRectMap().put("SD 1 Slides 1080 1,1", new Rectangle(5, 5, 309, 221));
            sceneToMidpointMap.put("SD 1 Slides 1080 1,1", new Point(159, 115));
            slotOverlayMap.get("SD1Slides1080").add("SD 1 Slides 1080 1,2");
            getSceneToRectMap().put("SD 1 Slides 1080 1,2", new Rectangle(62, 5, 309, 221));
            sceneToMidpointMap.put("SD 1 Slides 1080 1,2", new Point(216, 115));
            slotOverlayMap.get("SD1Slides1080").add("SD 1 Slides 1080 1,3");
            getSceneToRectMap().put("SD 1 Slides 1080 1,3", new Rectangle(108, 5, 308, 221));
            sceneToMidpointMap.put("SD 1 Slides 1080 1,3", new Point(262, 115));
        }

        @Override
        protected void changeToScene(String scene) {
            ObsAutomationTwo.this.changeToScene(scene);
        }
    };

    static OBSRemoteController controller = new OBSRemoteController("ws://localhost:4444", false, "crefObsWebsockets", true);
    public static Comparator overlaySorter = new Comparator<String>() {
        @Override
        public int compare(String t, String t1) {
            return t.compareTo(t1);
        }
    };

    Callback<SetCurrentSceneResponse> callback = new Callback<SetCurrentSceneResponse>() {
        @Override
        public void run(SetCurrentSceneResponse rt) {
            if (rt.getError() != null) {
                System.out.println("Set Current Scene Error: " + rt.getError());
            }

        }
    };
    private Callback<SetTransitionDurationResponse> responseCallback = new Callback<SetTransitionDurationResponse>() {
        @Override
        public void run(SetTransitionDurationResponse rt) {
            if (rt.getError() != null) {
                System.out.println("Transition Duration Error: " + rt.getError());
            }
        }
    };

    private static String currentScene = "";

    BufferedImage slideImage;
    BufferedImage slideLabelImage;
    BufferedImage prevSlideImage;
    int requiredColorDifference = 20;
    private long newSlideTime;
    boolean cancelWorshipSetTimer = true;
    boolean cancelAutopilot = true;
    boolean autoPilotStarted = false;
    int worshipSetTimerLength = 0;

    Rectangle programRectangle = new Rectangle(482, 32, 429, 239);

    private static int diffCount = 0;
    private static long slideSwitchOffTime = 0;

    private boolean isDifferent(int rgb, int rgb0) {
        return isDifferent(rgb, rgb0, requiredColorDifference);
    }

    private boolean isDifferent(int rgb, int rgb0, int requiredColorDifference) {
        int r = (rgb >> 16) & 0xFF;
        int g = (rgb >> 8) & 0xFF;
        int b = (rgb) & 0xFF;

        int r0 = (rgb0 >> 16) & 0xFF;
        int g0 = (rgb0 >> 8) & 0xFF;
        int b0 = (rgb0) & 0xFF;

        boolean redDiff = Math.abs(r0 - r) > requiredColorDifference;
        boolean greenDiff = Math.abs(g0 - g) > requiredColorDifference;
        boolean blueDiff = Math.abs(b0 - b) > requiredColorDifference;

        if (redDiff) {
            if (greenDiff || blueDiff) {
                return true;
            }
        }

        return greenDiff && blueDiff;
    }

    Rectangle slideRectangle = new Rectangle(265, 276, 213, 118);

    private void postInitComponents() {
        if (controller.isFailed()) { // Awaits response from OBS
            // Here you can handle a failed connection request
            System.out.println("CONNECTION TO OBS FAILED");
        }
        Callback<GetCurrentSceneResponse> getSceneCallback = new Callback<GetCurrentSceneResponse>() {
            @Override
            public void run(GetCurrentSceneResponse rt) {
                System.out.println(rt.getName());
                currentScene = rt.getName();
            }
        };

        controller.getCurrentScene(getSceneCallback);

        controller.registerSwitchScenesCallback(new Callback<SwitchScenesResponse>() {
            @Override
            public void run(SwitchScenesResponse rt) {
                currentScene = rt.getSceneName();
                if (switchToSlides) {
                    switchToSlides = false;
                    Thread t = new Thread(new Runnable() {
                        @Override
                        public void run() {
                            try {
                                Thread.sleep(100);
                            } catch (InterruptedException ex) {
                                Logger.getLogger(ObsAutomationTwo.class.getName()).log(Level.SEVERE, null, ex);
                            }
                            controller.setTransitionDuration(fadeSlider.getValue(), responseCallback);
                            controller.changeSceneWithTransition("Slides With Overlay", "Fade", callback);
                        }
                    });
                    t.start();
                }
                setInTransition(false);
            }
        });

        overlaySwitchButton.setIcon(new ImageIcon(SlideState.SLIDE_COMBO.getOverlayImage()));
        overlaySwitchButton.setText("");
        overlaySwitchButton1.setIcon(new ImageIcon(SlideState.NO_SLIDE.getOverlayImage()));
        overlaySwitchButton1.setText("");

        pickerPanel.add(firstSlotPanel);
        pickerPanel.add(thirdSlotPanel);
        pickerPanel.add(fourthSlotPanel);

        fullSlidesButton.setText("");

//        Thread t = new Thread(new Runnable() {
//            @Override
//            public void run() {
//                while (true) {
//                    fullSlidesButton.setIcon(new ImageIcon(robot.createScreenCapture(new Rectangle(new Point(265, 280), new Dimension(210, 113)))));
//                    
//                    try {
//                        Thread.sleep(1000);
//                    } catch (InterruptedException ex) {
//                        Logger.getLogger(ObsAutomationTwo.class.getName()).log(Level.SEVERE, null, ex);
//                    }
//                }
//            }
//        });
//        t.start();
        Thread slideThread = new Thread(new Runnable() {

            Rectangle slideCheckRectangle = new Rectangle(70, 5, 20, 110);

            @Override
            public void run() {
                prevSlideImage = null;
                boolean prevNotADifference = true;
                while (true) {
                    slideImage = robot.createScreenCapture(slideRectangle);
                    slideLabelImage = robot.createScreenCapture(slideRectangle);

                    Graphics g = slideLabelImage.getGraphics();
                    g.setColor(Color.RED);
                    g.drawRect(slideCheckRectangle.x, slideCheckRectangle.y, slideCheckRectangle.width, slideCheckRectangle.height);

                    if (prevSlideImage != null) {
                        boolean slideDifference = false;
                        for (int i = slideCheckRectangle.x; i < slideCheckRectangle.width + slideCheckRectangle.x && !slideDifference; i++) {
                            for (int j = slideCheckRectangle.y; j < slideCheckRectangle.height + slideCheckRectangle.y && !slideDifference; j++) {
                                if (isDifferent(slideImage.getRGB(i, j), prevSlideImage.getRGB(i, j))) {
                                    slideDifference = true;
                                }
                            }
                        }

                        if (slideDifference) {
                            if (prevNotADifference) {
                                newSlideTime = System.currentTimeMillis();

                                boolean switched = false;

                                if (!cancelAutopilot) {
                                    int prevRGB = slideImage.getRGB(slideCheckRectangle.x, slideCheckRectangle.y);
                                    int currRGB;
                                    diffCount = 0;
                                    for (int j = slideCheckRectangle.y + 1; j < slideCheckRectangle.height + slideCheckRectangle.y; j++) {
                                        currRGB = slideImage.getRGB(slideCheckRectangle.x, j);
                                        if (isDifferent(currRGB, prevRGB)) {
                                            diffCount++;
                                        }
                                        prevRGB = currRGB;
                                    }

                                    System.out.println("New Slide. " + diffCount);
                                    if (!slideState.equals(SlideState.FULL_SLIDES)) {
                                        if (autoPilotStarted) {
                                            switched = true;
                                            changeToScene("Slides With Overlay");
                                            setSlideState(SlideState.FULL_SLIDES);
                                        } else {
                                            System.out.println("autopilot switch to Slides With Overlay");
                                        }
                                    }

                                    slideSwitchOffTime = System.currentTimeMillis() + (slideMultiplierSlider.getValue() * diffCount);

                                }
                                try {
                                    if (!switched) {
                                        if (!cancelAutoSlideSwitch) {
                                            if (slideState.equals(SlideState.NO_SLIDE)) {
                                                fullSlidesButton.doClick();
                                            }
                                        } else {
                                            slidesPanel.setOpaque(true);
                                        }
                                    }
                                } catch (Exception e) {
                                    e.printStackTrace();
                                }

                                prevNotADifference = false;

                            }
                        } else {
                            prevNotADifference = true;
                        }
                    }

                    fullSlidesButton.setIcon(new ImageIcon(slideLabelImage));
                    prevSlideImage = slideImage;
                    try {
                        Thread.sleep(500);
                    } catch (InterruptedException ex) {
                        ex.printStackTrace();
                    }
                }

            }
        });
        slideThread.start();

        fadeLabel.setText(fadeSlider.getValue() + " ms");
        moveLabel.setText(moveSlider.getValue() + " ms");

        setLocation(960, 0);
        setSize(new Dimension(950, 1000));
        setSlideState(SlideState.NO_SLIDE);
        jLabel15.setText(firstSceneLabel.replaceAll(Pattern.quote("<%SCENE%>"), firstScene));
    }

    boolean inTransition = false;

    private void changeToScene(String scene) {
        if (currentScene.equals(scene)) {
            return;
        }
        String transitionType = "Fade";
        int duration = 1000;
        if (scene.equals("Slides (No Audio Broadcast)") || currentScene.equals("Slides (No Audio Broadcast)")) {
            transitionType = "Fade";
        } else if (currentScene.contains("Slide")) {
            if (scene.contains("Slide")) {
                if ("Slides With Overlay".equals(currentScene) || "Slides With Overlay".equals(scene) || currentScene.substring(0, 7).equals(scene.substring(0, 7))) {
                    transitionType = "Slow Move";
                } else {
                    transitionType = "Fade";
                }
            } else {
                transitionType = "Fade";
            }
        } else {
            if (scene.contains("Slide")) {
                transitionType = "Fade";
            } else {
                try {
                    if (currentScene.substring(0, 7).equals(scene.substring(0, 7))) {
                        transitionType = "Slow Move";
                    } else {
                        transitionType = "Fade";
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        }

        if (transitionType.equals("Slow Move")) {
            duration = moveSlider.getValue();
        } else if (transitionType.equals("Fade")) {
            duration = fadeSlider.getValue();
        }

        if (inTransition) {
            if ("Slides With Overlay".equals(scene) && !currentScene.contains("Slide")) {
                switchToSlides = true;
            } else {
                if (transitionType.equals("Fade")) {
                    controller.changeSceneWithTransition(scene, "Cut", callback);
                } else {
                    System.out.println("We're in transition. Do nothing");
                }
            }
        } else {
            if (setInTransition(true)) {
                controller.setTransitionDuration(duration, responseCallback);
                controller.changeSceneWithTransition(scene, transitionType, callback);
            }
        }
    }

    private synchronized boolean setInTransition(boolean b) {
        if (b == true && inTransition == true) {
            return false;
        }
        inTransition = b;
        return true;
    }
}
