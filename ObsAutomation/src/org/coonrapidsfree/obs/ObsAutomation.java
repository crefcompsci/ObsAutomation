package org.coonrapidsfree.obs;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Rectangle;
import java.awt.Robot;
import java.awt.Window;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.net.URL;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Pattern;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.SwingUtilities;
import net.twasi.obsremotejava.OBSRemoteController;
import net.twasi.obsremotejava.callbacks.Callback;
import net.twasi.obsremotejava.events.responses.SwitchScenesResponse;
import net.twasi.obsremotejava.objects.Scene;
import net.twasi.obsremotejava.requests.GetCurrentScene.GetCurrentSceneResponse;
import net.twasi.obsremotejava.requests.SetCurrentScene.SetCurrentSceneResponse;
import net.twasi.obsremotejava.requests.SetSceneItemProperties.SetSceneItemPropertiesResponse;
import net.twasi.obsremotejava.requests.SetStudioModeEnabled.SetStudioModeEnabledResponse;
import net.twasi.obsremotejava.requests.SetTransitionDuration.SetTransitionDurationResponse;
import net.twasi.obsremotejava.requests.StartRecording.StartRecordingResponse;
import net.twasi.obsremotejava.requests.StartStreaming.StartStreamingResponse;
import net.twasi.obsremotejava.requests.StopRecording.StopRecordingResponse;
import net.twasi.obsremotejava.requests.StopStreaming.StopStreamingResponse;
import org.coonrapidsfree.util.ImageCreator;

public class ObsAutomation extends javax.swing.JFrame {

    private static String currentBaseSceneName = "LEFT";
    private Map<String, String> comboSceneToSuffix = new HashMap<String, String>();
    private String currentComboSceneSuffix = "A";
    private String currentComboScene = "COMBO SCENE 1";

    private static String firstScene = "FullB 1 1,1";
    private String firstSceneLabel = "<html><body><%SCENE%> will be automatically pressed.<br/>";

    private boolean switchToSlides;
    private List<BufferedImage> blankSlides = new ArrayList<BufferedImage>();

    /**
     * Creates new form ObsAutomationTwo
     */
    public ObsAutomation() {
        comboSceneToSuffix.put("COMBO SCENE 1", "A");
        comboSceneToSuffix.put("COMBO SCENE 2", "B");
        initComponents();
        postInitComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        helperDialog = new javax.swing.JDialog();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        worshipSetCountDownDialog = new javax.swing.JDialog();
        jPanel20 = new javax.swing.JPanel();
        countDownCancelButton = new javax.swing.JButton();
        jPanel21 = new javax.swing.JPanel();
        countDownLabel = new javax.swing.JLabel();
        jPanel22 = new javax.swing.JPanel();
        jLabel15 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        errorDialog = new javax.swing.JDialog();
        errorDialogLabel = new javax.swing.JLabel();
        controlDialog = new javax.swing.JDialog();
        jPanel2 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jPanel10 = new javax.swing.JPanel();
        jPanel11 = new javax.swing.JPanel();
        jPanel19 = new javax.swing.JPanel();
        jPanel17 = new javax.swing.JPanel();
        jLabel17 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jPanel18 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        worshipCountdownTimer = new javax.swing.JTextField();
        startCountdownButton = new javax.swing.JButton();
        jLabel16 = new javax.swing.JLabel();
        jPanel23 = new javax.swing.JPanel();
        jPanel13 = new javax.swing.JPanel();
        jPanel14 = new javax.swing.JPanel();
        fadeSlider = new javax.swing.JSlider();
        moveSlider = new javax.swing.JSlider();
        jPanel16 = new javax.swing.JPanel();
        jPanel25 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        fadeLabel = new javax.swing.JLabel();
        jPanel26 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        moveLabel = new javax.swing.JLabel();
        jPanel24 = new javax.swing.JPanel();
        slideControlPanel = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jPanel45 = new javax.swing.JPanel();
        jButton5 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        slidesPanel = new javax.swing.JPanel();
        fullSlidesButton = new javax.swing.JButton();
        jPanel33 = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        streamAndRecordLabel = new javax.swing.JLabel();
        jPanel9 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        overlaySwitchButton = new javax.swing.JButton();
        overlaySwitchButton1 = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        currentOverlayLabel = new javax.swing.JLabel();
        filler2 = new javax.swing.Box.Filler(new java.awt.Dimension(60, 0), new java.awt.Dimension(60, 0), new java.awt.Dimension(60, 32767));
        pickerPanel = new javax.swing.JPanel();
        jMenuBar1 = new javax.swing.JMenuBar();
        helperMenu = new javax.swing.JMenu();
        streamPrepHelperItem = new javax.swing.JMenuItem();
        startItem = new javax.swing.JMenuItem();
        stopItem = new javax.swing.JMenuItem();
        jMenuItem6 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        welcomeMenuItem = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();

        helperDialog.addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                helperDialogWindowClosing(evt);
            }
        });
        helperDialog.getContentPane().setLayout(new java.awt.GridLayout(0, 1));

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel10.setText("Go to youtube.com in Chrome. Click Create (Looks like a video camera with a + on it).  Select Go Live.");
        helperDialog.getContentPane().add(jLabel10);

        jLabel11.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel11.setText("Click Edit.  Update the title and description to the sermon title.");
        helperDialog.getContentPane().add(jLabel11);

        jLabel23.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel23.setText("Click Edit.  Update the title and description to the sermon title.  Minimize Chrome.");
        helperDialog.getContentPane().add(jLabel23);

        jLabel12.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        helperDialog.getContentPane().add(jLabel12);

        jLabel22.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel22.setForeground(new java.awt.Color(153, 0, 0));
        jLabel22.setText("Press record on the camera.");
        helperDialog.getContentPane().add(jLabel22);

        jLabel13.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel13.setText("In OBS, Select the View menu, Select Multiview (Windowed), and drag the resulting popup window to the upper left hand corner of the screen.");
        helperDialog.getContentPane().add(jLabel13);

        jLabel14.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel14.setText("Close this Dialog");
        helperDialog.getContentPane().add(jLabel14);

        worshipSetCountDownDialog.setUndecorated(true);

        countDownCancelButton.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        countDownCancelButton.setText("Cancel");
        countDownCancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                countDownCancelButtonActionPerformed(evt);
            }
        });
        jPanel20.add(countDownCancelButton);

        worshipSetCountDownDialog.getContentPane().add(jPanel20, java.awt.BorderLayout.SOUTH);

        countDownLabel.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        countDownLabel.setText("jLabel15");
        jPanel21.add(countDownLabel);

        worshipSetCountDownDialog.getContentPane().add(jPanel21, java.awt.BorderLayout.NORTH);

        jPanel22.setLayout(new java.awt.BorderLayout());

        jLabel15.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel15.setText("<html><body><font color=orange><%SCENE%></font> will be automatically pressed.<br/>after 2 seconds -CREF lower third will automatically be pressed.<br/>after 10 seconds -CREF lower thrid will automatically turn off.");
        jPanel22.add(jLabel15, java.awt.BorderLayout.CENTER);

        jLabel21.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel21.setForeground(new java.awt.Color(153, 0, 51));
        jPanel22.add(jLabel21, java.awt.BorderLayout.PAGE_START);

        worshipSetCountDownDialog.getContentPane().add(jPanel22, java.awt.BorderLayout.CENTER);

        errorDialog.setTitle("Error Dialog");

        errorDialogLabel.setText("Error Text");
        errorDialog.getContentPane().add(errorDialogLabel, java.awt.BorderLayout.CENTER);

        jPanel2.setLayout(new java.awt.BorderLayout());

        jPanel6.setLayout(new java.awt.BorderLayout());
        jPanel2.add(jPanel6, java.awt.BorderLayout.WEST);

        jPanel7.setLayout(new java.awt.BorderLayout());

        jPanel3.setLayout(new javax.swing.BoxLayout(jPanel3, javax.swing.BoxLayout.PAGE_AXIS));

        jPanel10.add(jPanel11);

        jPanel19.setLayout(new java.awt.BorderLayout());

        jPanel17.setLayout(new java.awt.GridLayout(0, 1, 0, 3));

        jLabel17.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel17.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel17.setText("Set Scene to Start Worship Set:");
        jPanel17.add(jLabel17);

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel6.setText("Countdown Timer (seconds):");
        jPanel17.add(jLabel6);

        jLabel7.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel7.setText("Start Countdown Worship Set:");
        jPanel17.add(jLabel7);

        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jPanel17.add(jLabel8);

        jPanel19.add(jPanel17, java.awt.BorderLayout.WEST);

        jPanel18.setLayout(new java.awt.GridLayout(0, 1, 0, 3));

        jButton1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jButton1.setText("Set");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel18.add(jButton1);

        worshipCountdownTimer.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        worshipCountdownTimer.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        worshipCountdownTimer.setText("120");
        jPanel18.add(worshipCountdownTimer);

        startCountdownButton.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        startCountdownButton.setText("Start");
        startCountdownButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startCountdownButtonActionPerformed(evt);
            }
        });
        jPanel18.add(startCountdownButton);

        jLabel16.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jPanel18.add(jLabel16);

        jPanel19.add(jPanel18, java.awt.BorderLayout.EAST);

        jPanel10.add(jPanel19);

        jPanel3.add(jPanel10);

        jPanel23.setLayout(new java.awt.BorderLayout());

        jPanel13.setLayout(new java.awt.BorderLayout());

        jPanel14.setLayout(new java.awt.GridLayout(0, 1));

        fadeSlider.setMajorTickSpacing(1000);
        fadeSlider.setMaximum(3000);
        fadeSlider.setMinimum(100);
        fadeSlider.setPaintTicks(true);
        fadeSlider.setToolTipText("");
        fadeSlider.setValue(1500);
        fadeSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                fadeSliderStateChanged(evt);
            }
        });
        jPanel14.add(fadeSlider);

        moveSlider.setMajorTickSpacing(1000);
        moveSlider.setMaximum(15000);
        moveSlider.setMinimum(1500);
        moveSlider.setPaintTicks(true);
        moveSlider.setToolTipText("");
        moveSlider.setValue(5000);
        moveSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                moveSliderStateChanged(evt);
            }
        });
        jPanel14.add(moveSlider);

        jPanel13.add(jPanel14, java.awt.BorderLayout.CENTER);

        jPanel16.setLayout(new java.awt.GridLayout(0, 1));

        jPanel25.setLayout(new java.awt.GridLayout(0, 1));

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel2.setText("Fade Duration:");
        jPanel25.add(jLabel2);

        fadeLabel.setText("jLabel1");
        jPanel25.add(fadeLabel);

        jPanel16.add(jPanel25);

        jPanel26.setLayout(new java.awt.GridLayout(0, 1));

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel3.setText("Move Duration:");
        jPanel26.add(jLabel3);

        moveLabel.setText("jLabel5");
        jPanel26.add(moveLabel);

        jPanel16.add(jPanel26);

        jPanel13.add(jPanel16, java.awt.BorderLayout.WEST);

        jPanel23.add(jPanel13, java.awt.BorderLayout.NORTH);

        jPanel3.add(jPanel23);
        jPanel3.add(jPanel24);

        jPanel7.add(jPanel3, java.awt.BorderLayout.CENTER);

        jPanel2.add(jPanel7, java.awt.BorderLayout.CENTER);

        controlDialog.getContentPane().add(jPanel2, java.awt.BorderLayout.CENTER);

        slideControlPanel.setLayout(new java.awt.BorderLayout());

        jPanel1.setLayout(new java.awt.BorderLayout());

        jPanel45.setBorder(javax.swing.BorderFactory.createTitledBorder("Slides:"));
        jPanel45.setLayout(new java.awt.GridLayout(1, 0, 3, 0));

        jButton5.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jButton5.setText("Blank");
        jButton5.setToolTipText("Mark a slide as blank.");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        jPanel45.add(jButton5);

        jButton4.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jButton4.setText("Auto");
        jButton4.setToolTipText("Auto Switch To New Slides");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        jPanel45.add(jButton4);

        jPanel1.add(jPanel45, java.awt.BorderLayout.NORTH);

        slidesPanel.setBackground(new java.awt.Color(51, 153, 0));
        slidesPanel.setOpaque(false);

        fullSlidesButton.setForeground(new java.awt.Color(51, 102, 0));
        fullSlidesButton.setText("Full Screen Slides");
        fullSlidesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fullSlidesButtonActionPerformed(evt);
            }
        });
        slidesPanel.add(fullSlidesButton);

        jPanel1.add(slidesPanel, java.awt.BorderLayout.CENTER);

        slideControlPanel.add(jPanel1, java.awt.BorderLayout.CENTER);

        jPanel33.setLayout(new java.awt.BorderLayout());

        jLabel9.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel9.setText("Status:");
        jPanel8.add(jLabel9);

        streamAndRecordLabel.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        streamAndRecordLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jPanel8.add(streamAndRecordLabel);

        jPanel33.add(jPanel8, java.awt.BorderLayout.PAGE_START);

        jPanel9.setBorder(javax.swing.BorderFactory.createTitledBorder("Overlay:"));
        jPanel9.setLayout(new java.awt.BorderLayout());

        jPanel4.setLayout(new java.awt.GridLayout(0, 1));

        overlaySwitchButton.setText("Slide Combo");
        overlaySwitchButton.setToolTipText("Slide Combo (Alt+C)");
        overlaySwitchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                overlaySwitchButtonActionPerformed(evt);
            }
        });
        jPanel4.add(overlaySwitchButton);

        overlaySwitchButton1.setText("Full Screen");
        overlaySwitchButton1.setToolTipText("Full Screen (Alt+F)");
        overlaySwitchButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                overlaySwitchButton1ActionPerformed(evt);
            }
        });
        jPanel4.add(overlaySwitchButton1);

        jPanel9.add(jPanel4, java.awt.BorderLayout.CENTER);

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder("Current:"));
        jPanel5.setLayout(new java.awt.BorderLayout());
        jPanel5.add(currentOverlayLabel, java.awt.BorderLayout.CENTER);
        jPanel5.add(filler2, java.awt.BorderLayout.PAGE_START);

        jPanel9.add(jPanel5, java.awt.BorderLayout.EAST);

        jPanel33.add(jPanel9, java.awt.BorderLayout.CENTER);

        slideControlPanel.add(jPanel33, java.awt.BorderLayout.WEST);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        pickerPanel.setLayout(new java.awt.GridLayout(2, 0, 0, 2));
        getContentPane().add(pickerPanel, java.awt.BorderLayout.NORTH);

        helperMenu.setText("Helper");

        streamPrepHelperItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_NUMPAD1, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        streamPrepHelperItem.setText("Stream Prep Helper");
        streamPrepHelperItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                streamPrepHelperItemActionPerformed(evt);
            }
        });
        helperMenu.add(streamPrepHelperItem);

        startItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_NUMPAD2, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        startItem.setText("Start Stream and Record");
        startItem.setEnabled(false);
        startItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startItemActionPerformed(evt);
            }
        });
        helperMenu.add(startItem);

        stopItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_NUMPAD3, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        stopItem.setText("Stop Streaming and Recording");
        stopItem.setEnabled(false);
        stopItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopItemActionPerformed(evt);
            }
        });
        helperMenu.add(stopItem);

        jMenuItem6.setText("Open Controller Dialog");
        jMenuItem6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem6ActionPerformed(evt);
            }
        });
        helperMenu.add(jMenuItem6);

        jMenuBar1.add(helperMenu);

        jMenu2.setText("Scenes");

        welcomeMenuItem.setText("Hi (No Audio)");
        welcomeMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                welcomeMenuItemActionPerformed(evt);
            }
        });
        jMenu2.add(welcomeMenuItem);

        jMenuItem3.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMenuItem3.setText("Slides (No Audio)");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem3);

        jMenuItem4.setText("Be Right Back (No Audio)");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem4);

        jMenuItem5.setText("Bye (No Audio)");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem5);

        jMenuBar1.add(jMenu2);

        jMenu1.setText("Overlay");

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.ALT_DOWN_MASK));
        jMenuItem1.setText("Slide Combo");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuItem2.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F, java.awt.event.InputEvent.ALT_DOWN_MASK));
        jMenuItem2.setText("Full Screen");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private SlideState slideState = SlideState.NO_SLIDE;
    private void overlaySwitchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_overlaySwitchButtonActionPerformed
        if (!SlideState.SLIDE_COMBO.equals(slideState)) {
            setSlideState(SlideState.SLIDE_COMBO);
        } else {
//            try {
//                int index = firstSlotCamOverlays.indexOf(firstSlotCurrentOverlay);
//                if (index >= firstSlotSlideOverlays.size()) {
//                    index = firstSlotSlideOverlays.size() - 1;
//                }
//                firstSlotCurrentOverlay = firstSlotSlideOverlays.get(index);
//                Point p = sceneToMidpointMap.get(currentScene);
//
//                determinePotentialScene(p.x, p.y, firstSlotOverlayMap.get(firstSlotCurrentOverlay));
//                changeToScene(potentialScene);
//            } catch (Exception e) {
//                System.out.println(e.getMessage());
//            }
        }
    }//GEN-LAST:event_overlaySwitchButtonActionPerformed

    private void overlaySwitchButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_overlaySwitchButton1ActionPerformed
        if (!SlideState.NO_SLIDE.equals(slideState)) {
            setSlideState(SlideState.NO_SLIDE);
        } else {
//            try {
//                int index = firstSlotSlideOverlays.indexOf(firstSlotCurrentOverlay);
//                if (index >= firstSlotCamOverlays.size()) {
//                    index = firstSlotCamOverlays.size() - 1;
//                }
//                firstSlotCurrentOverlay = firstSlotCamOverlays.get(index);
//                Point p = sceneToMidpointMap.get(currentScene);
//
//                determinePotentialScene(p.x, p.y, firstSlotOverlayMap.get(firstSlotCurrentOverlay));
//                changeToScene(potentialScene);
//            } catch (Exception e) {
//                System.out.println(e.getMessage());
//            }
        }
    }//GEN-LAST:event_overlaySwitchButton1ActionPerformed
    boolean cancelAutoSlideSwitch = true;
    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        cancelAutoSlideSwitch = !cancelAutoSlideSwitch;
        if (cancelAutoSlideSwitch) {
            jButton4.setForeground(Color.RED);
        } else {
            jButton4.setForeground(Color.GREEN);
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void cancelAutoSlideSwitch() {
        if (!cancelAutoSlideSwitch) {
            cancelAutoSlideSwitch = true;
            jButton4.setForeground(Color.RED);
        }
    }

    private void fullSlidesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fullSlidesButtonActionPerformed
        changeToScene("SLIDES WITH AUDIO", null);
        slidesPanel.setOpaque(false);
    }//GEN-LAST:event_fullSlidesButtonActionPerformed

    private void helperDialogWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_helperDialogWindowClosing
        requestFocus();
    }//GEN-LAST:event_helperDialogWindowClosing

    private void countDownCancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_countDownCancelButtonActionPerformed
        cancelWorshipSetTimer = true;
    }//GEN-LAST:event_countDownCancelButtonActionPerformed

    private void startCountdownButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startCountdownButtonActionPerformed
        jLabel15.setText(firstSceneLabel.replaceAll(Pattern.quote("<%SCENE%>"), firstScene));

        SlotPanel.setShowInitialScene(true);

        startCountdownButton.setEnabled(false);
        worshipSetCountDownDialog.setVisible(true);
        worshipSetCountDownDialog.pack();

        if (!streamAndRecordLabel.getText().equals("Recording")) {
            jLabel21.setText("Don't forget to start recording!!!");
            worshipSetCountDownDialog.pack();
            Thread t = new Thread(new Runnable() {
                @Override
                public void run() {
                    for (int i = 0; i < 6; i++) {
                        SwingUtilities.invokeLater(new Runnable() {
                            @Override
                            public void run() {
                                helperMenu.setForeground(new Color(0, 150, 0));
                            }
                        });

                        try {
                            Thread.sleep(1000);
                        } catch (InterruptedException ex) {
                            ex.printStackTrace();
                        }
                        SwingUtilities.invokeLater(new Runnable() {
                            @Override
                            public void run() {
                                helperMenu.setForeground(Color.BLACK);
                            }
                        });

                        try {
                            Thread.sleep(500);
                        } catch (InterruptedException ex) {
                            ex.printStackTrace();
                        }
                    }
                }
            });
            t.start();
        }

        try {
            worshipSetTimerLength = Integer.valueOf(worshipCountdownTimer.getText());

            cancelWorshipSetTimer = false;

            Thread t = new Thread(new Runnable() {
                @Override
                public void run() {
                    for (; worshipSetTimerLength > 0; worshipSetTimerLength--) {
                        countDownLabel.setText(worshipSetTimerLength + "");
                        try {
                            Thread.sleep(990);
                        } catch (InterruptedException ex) {
                            ex.printStackTrace();
                        }
                        if (cancelWorshipSetTimer) {
                            break;
                        }
                    }

                    SlotPanel.setShowInitialScene(false);
                    worshipSetCountDownDialog.setVisible(false);
                    startCountdownButton.setEnabled(true);

                    if (!cancelWorshipSetTimer) {
                        controller.setTransitionDuration(500, responseCallback);
                        controller.changeSceneWithTransition("Slides With Overlay", "Fade", callback);
                        try {
                            Thread.sleep(600);
                        } catch (InterruptedException ex) {
                            ex.printStackTrace();
                        }

                        setSlideState(SlideState.NO_SLIDE);
                        controller.setTransitionDuration(1500, responseCallback);
                        System.out.println(firstScene);
                        controller.changeSceneWithTransition(firstScene, "Fade", callback);

                        try {
                            Thread.sleep(2000);
                        } catch (InterruptedException ex) {
                            ex.printStackTrace();
                        }
                    }
                }
            });
            t.start();

        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_startCountdownButtonActionPerformed

    private void fadeSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_fadeSliderStateChanged
        fadeLabel.setText(fadeSlider.getValue() + " ms");
    }//GEN-LAST:event_fadeSliderStateChanged

    private void moveSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_moveSliderStateChanged
        moveLabel.setText(moveSlider.getValue() + " ms");
    }//GEN-LAST:event_moveSliderStateChanged

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        System.out.println("Setting First Scene " + currentScene);
        firstScene = currentScene;
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        System.out.println("mark slide as blank");

        BufferedImage blank = robot.createScreenCapture(slideRectangle);
        blankSlides.add(blank);
//        String location = ObsAutomation.class.getResource("/org/coonrapidsfree/images/BlankSlides/" + System.currentTimeMillis() + ".PNG").getPath();
//        File outputFile = new File(location);
//        try {
//            ImageIO.write(blank, "PNG", outputFile);
//        } catch (IOException ex) {
//            Logger.getLogger(ImageCreator.class.getName()).log(Level.SEVERE, null, ex);
//        }
    }//GEN-LAST:event_jButton5ActionPerformed

    private void streamPrepHelperItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_streamPrepHelperItemActionPerformed
        streamPrepHelperItem.setEnabled(false);
        System.out.println("Switch to Studio Mode and Back");
        Callback<SetStudioModeEnabledResponse> cb = new Callback<SetStudioModeEnabledResponse>() {
            @Override
            public void run(SetStudioModeEnabledResponse rt) {
                if (rt.getError() != null) {
                    errorDialogLabel.setText(rt.getError());
                    errorDialog.setVisible(true);
                    errorDialog.pack();
                }
            }
        };
        controller.setStudioModeEnabled(false, cb);
        try {
            Thread.sleep(500);
        } catch (InterruptedException ex) {
            ex.printStackTrace();
        }
        controller.setStudioModeEnabled(true, cb);

        helperDialog.setVisible(true);
        helperDialog.pack();
        helperDialog.setAlwaysOnTop(true);
        helperDialog.setLocation(100, 100);

        welcomeMenuItem.doClick();
        startItem.setEnabled(true);
    }//GEN-LAST:event_streamPrepHelperItemActionPerformed

    private void welcomeMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_welcomeMenuItemActionPerformed
        changeToScene("INTRO - NO IN HOUSE AUDIO", null);
    }//GEN-LAST:event_welcomeMenuItemActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        cancelAutoSlideSwitch();
        changeToScene("SLIDES", null);
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        cancelAutoSlideSwitch();
        changeToScene("BRB - NO IN HOUSE AUDIO", null);
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
        cancelAutoSlideSwitch();
        changeToScene("ENDING - NO IN HOUSE AUDIO", null);
    }//GEN-LAST:event_jMenuItem5ActionPerformed

    private void startItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startItemActionPerformed
        startItem.setEnabled(false);
        changeToScene("INTRO - NO IN HOUSE AUDIO", null);
        controller.startRecording(new Callback<StartRecordingResponse>() {
            @Override
            public void run(StartRecordingResponse rt) {
                if (rt.getError() != null) {
                    errorDialogLabel.setText(rt.getError());
                    errorDialog.setVisible(true);
                    errorDialog.pack();
                }
            }
        });

        controller.startStreaming(new Callback<StartStreamingResponse>() {
            @Override
            public void run(StartStreamingResponse rt) {
                if (rt.getError() != null) {
                    errorDialogLabel.setText(rt.getError());
                    errorDialog.setVisible(true);
                    errorDialog.pack();
                }
            }
        });

        streamAndRecordLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/coonrapidsfree/images/record.png")));
        streamAndRecordLabel.setText("Recording");
        stopItem.setEnabled(true);
    }//GEN-LAST:event_startItemActionPerformed

    private void stopItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopItemActionPerformed
        stopItem.setEnabled(false);

        changeToScene("ENDING - NO IN HOUSE AUDIO", null);
        try {
            Thread.sleep(2000);
        } catch (Exception e) {
        }

        controller.stopRecording(new Callback<StopRecordingResponse>() {
            @Override
            public void run(StopRecordingResponse rt) {
                if (rt.getError() != null) {
                    errorDialogLabel.setText(rt.getError());
                    errorDialog.setVisible(true);
                    errorDialog.pack();
                }
            }
        });

        controller.stopStreaming(new Callback<StopStreamingResponse>() {
            @Override
            public void run(StopStreamingResponse rt) {
                if (rt.getError() != null) {
                    errorDialogLabel.setText(rt.getError());
                    errorDialog.setVisible(true);
                    errorDialog.pack();
                }
            }
        });

        streamAndRecordLabel.setIcon(null);
        streamAndRecordLabel.setText("Recording Stopped");
    }//GEN-LAST:event_stopItemActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        if (!SlideState.SLIDE_COMBO.equals(slideState)) {
            setSlideState(SlideState.SLIDE_COMBO);
        }
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        if (!SlideState.NO_SLIDE.equals(slideState)) {
            setSlideState(SlideState.NO_SLIDE);
        }
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem6ActionPerformed
        controlDialog.setVisible(true);
        controlDialog.setLocation(960, 0);
//        controlDialog.setSize(900, 500);
        controlDialog.pack();
    }//GEN-LAST:event_jMenuItem6ActionPerformed

    BufferedImage prevProgramImage = null;
    BufferedImage prevSlot1Image = null;
    BufferedImage prevSlot3Image = null;
    BufferedImage prevSlot4Image = null;

    /**
     * @return the slideState
     */
    public SlideState getSlideState() {
        return slideState;
    }

    /**
     * @param slideState the slideState to set
     */
    public void setSlideState(SlideState slideState) {
//        System.out.println("     setting slide state: " + slideState.toString());
        this.slideState = slideState;
        currentOverlayLabel.setIcon(new ImageIcon(ImageUtilities.getImage(slideState.getOverlayImage(), 1, 0)));
        currentOverlayLabel.setToolTipText(slideState.toString());

        for (SlotPanel slotPanel : slotPanels) {
            slotPanel.setSlideState(slideState);
        }
    }

    List<SlotPanel> slotPanels = new ArrayList<SlotPanel>();

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ObsAutomation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ObsAutomation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ObsAutomation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ObsAutomation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ObsAutomation().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JDialog controlDialog;
    private javax.swing.JButton countDownCancelButton;
    private javax.swing.JLabel countDownLabel;
    private javax.swing.JLabel currentOverlayLabel;
    private javax.swing.JDialog errorDialog;
    private javax.swing.JLabel errorDialogLabel;
    private javax.swing.JLabel fadeLabel;
    private javax.swing.JSlider fadeSlider;
    private javax.swing.Box.Filler filler2;
    private javax.swing.JButton fullSlidesButton;
    private javax.swing.JDialog helperDialog;
    private javax.swing.JMenu helperMenu;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel17;
    private javax.swing.JPanel jPanel18;
    private javax.swing.JPanel jPanel19;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel20;
    private javax.swing.JPanel jPanel21;
    private javax.swing.JPanel jPanel22;
    private javax.swing.JPanel jPanel23;
    private javax.swing.JPanel jPanel24;
    private javax.swing.JPanel jPanel25;
    private javax.swing.JPanel jPanel26;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel33;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel45;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JLabel moveLabel;
    private javax.swing.JSlider moveSlider;
    private javax.swing.JButton overlaySwitchButton;
    private javax.swing.JButton overlaySwitchButton1;
    private javax.swing.JPanel pickerPanel;
    private javax.swing.JPanel slideControlPanel;
    private javax.swing.JPanel slidesPanel;
    private javax.swing.JButton startCountdownButton;
    private javax.swing.JMenuItem startItem;
    private javax.swing.JMenuItem stopItem;
    private javax.swing.JLabel streamAndRecordLabel;
    private javax.swing.JMenuItem streamPrepHelperItem;
    private javax.swing.JMenuItem welcomeMenuItem;
    private javax.swing.JTextField worshipCountdownTimer;
    private javax.swing.JDialog worshipSetCountDownDialog;
    // End of variables declaration//GEN-END:variables

    public static Robot robot = null;

    static {
        try {
            robot = new Robot();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    static OBSRemoteController controller = new OBSRemoteController("ws://localhost:4444", false, "crefObsWebsockets", true);
    public static Comparator overlaySorter = new Comparator<String>() {
        @Override
        public int compare(String t, String t1) {
            return t.compareTo(t1);
        }
    };

    Callback<SetCurrentSceneResponse> callback = new Callback<SetCurrentSceneResponse>() {
        @Override
        public void run(SetCurrentSceneResponse rt) {
            if (rt.getError() != null) {
                errorDialogLabel.setText("Set Current Scene Error: " + rt.getError());
                errorDialog.setVisible(true);
                errorDialog.pack();
                System.out.println("Set Current Scene Error: " + rt.getError());
            }

        }
    };
    private Callback<SetTransitionDurationResponse> responseCallback = new Callback<SetTransitionDurationResponse>() {
        @Override
        public void run(SetTransitionDurationResponse rt) {
            if (rt.getError() != null) {
                errorDialogLabel.setText("Transition Duration Error: " + rt.getError());
                errorDialog.setVisible(true);
                errorDialog.pack();
                System.out.println("Transition Duration Error: " + rt.getError());
            }
        }
    };

    private static String currentScene = "";

    public static String getCurrentScene() {
        return currentScene;
    }

    BufferedImage slideImage;
    BufferedImage slideLabelImage;
    BufferedImage prevSlideImage;
    int requiredColorDifference = 20;
    private long newSlideTime;
    boolean cancelWorshipSetTimer = true;
    int worshipSetTimerLength = 0;

    Rectangle programRectangle = new Rectangle(482, 32, 429, 239);

    private static int diffCount = 0;

    private boolean isDifferent(int rgb, int rgb0) {
        return isDifferent(rgb, rgb0, requiredColorDifference);
    }

    private boolean isDifferent(int rgb, int rgb0, int requiredColorDifference) {
        int r = (rgb >> 16) & 0xFF;
        int g = (rgb >> 8) & 0xFF;
        int b = (rgb) & 0xFF;

        int r0 = (rgb0 >> 16) & 0xFF;
        int g0 = (rgb0 >> 8) & 0xFF;
        int b0 = (rgb0) & 0xFF;

        boolean redDiff = Math.abs(r0 - r) > requiredColorDifference;
        boolean greenDiff = Math.abs(g0 - g) > requiredColorDifference;
        boolean blueDiff = Math.abs(b0 - b) > requiredColorDifference;

        if (redDiff) {
            if (greenDiff || blueDiff) {
                return true;
            }
        }

        return greenDiff && blueDiff;
    }

    Rectangle slideRectangle = new Rectangle(ObsAutomationUtility.THUMBS_FORTH_COL_X, ObsAutomationUtility.THUMBS_SECOND_LINE_Y, ObsAutomationUtility.THUMBS_WIDTH, ObsAutomationUtility.THUMBS_HEIGHT);

    private void postInitComponents() {
        if (controller.isFailed()) { // Awaits response from OBS
            // Here you can handle a failed connection request
            System.out.println("CONNECTION TO OBS FAILED");
        }
        Callback<GetCurrentSceneResponse> getSceneCallback = new Callback<GetCurrentSceneResponse>() {
            @Override
            public void run(GetCurrentSceneResponse rt) {
                System.out.println("CURRENT SCENE RESPONSE: " + rt.getName());
                currentScene = rt.getName();
            }
        };

        controller.getCurrentScene(getSceneCallback);

        controller.registerSwitchScenesCallback(new Callback<SwitchScenesResponse>() {
            @Override
            public void run(SwitchScenesResponse rt) {
                currentScene = rt.getSceneName();
                if (switchToSlides) {
                    switchToSlides = false;
                    Thread t = new Thread(new Runnable() {
                        @Override
                        public void run() {
                            try {
                                Thread.sleep(100);
                            } catch (InterruptedException ex) {
                                Logger.getLogger(ObsAutomation.class.getName()).log(Level.SEVERE, null, ex);
                            }
                            controller.setTransitionDuration(fadeSlider.getValue(), responseCallback);
                            controller.changeSceneWithTransition("Slides With Overlay", "Fade", callback);
                        }
                    });
                    t.start();
                }
                setInTransition(false);
            }
        });

        overlaySwitchButton.setIcon(new ImageIcon(SlideState.SLIDE_COMBO.getOverlayImage()));
        overlaySwitchButton.setText("");
        overlaySwitchButton1.setIcon(new ImageIcon(SlideState.NO_SLIDE.getOverlayImage()));
        overlaySwitchButton1.setText("");

        SlotPanel sp = null;
        for (String s : ObsAutomationUtility.getSceneNames()) {
            if (sp != null) {//this will skip the last slot which we're taking care of with the slides button
                slotPanels.add(sp);
                pickerPanel.add(sp);
            }
            sp = new SlotPanel(s, ObsAutomationUtility.getSceneToCornersMap().get(s)) {
                @Override
                protected void changeToScene(String baseSceneName, String scene) {
                    String transitionType = null;
                    if (!baseSceneName.equals(currentBaseSceneName)) {
                        transitionType = "Fade";

                        currentBaseSceneName = baseSceneName;

                        for (String s : comboSceneToSuffix.keySet()) {//switch to the other COMBO SCENE
                            if (!currentComboScene.equals(s)) {
                                currentComboScene = s;
                                break;
                            }
                        }

                        currentComboSceneSuffix = comboSceneToSuffix.get(currentComboScene);
                        for (String s : ObsAutomationUtility.getSceneNames()) {
                            if (s.equals("SLIDES")) {
                                continue;
                            }
                            controller.setSourceVisibility(currentComboScene, s, s.equals(baseSceneName), new Callback<SetSceneItemPropertiesResponse>() {
                                @Override
                                public void run(SetSceneItemPropertiesResponse rt) {
//                                    System.out.println(rt.getStatus());
                                }
                            });
                        }

                    }
                    scene = scene.replaceFirst(Pattern.quote("A "), currentComboSceneSuffix + " ");
                    ObsAutomation.this.changeToScene(scene, transitionType);

                }
            };
        }

        pickerPanel.add(slideControlPanel);

        fullSlidesButton.setText("");

//        Thread t = new Thread(new Runnable() {
//            @Override
//            public void run() {
//                while (true) {
//                    fullSlidesButton.setIcon(new ImageIcon(robot.createScreenCapture(new Rectangle(new Point(265, 280), new Dimension(210, 113)))));
//                    
//                    try {
//                        Thread.sleep(1000);
//                    } catch (InterruptedException ex) {
//                        Logger.getLogger(ObsAutomationTwo.class.getName()).log(Level.SEVERE, null, ex);
//                    }
//                }
//            }
//        });
//        t.start();
        Thread slideThread = new Thread(new Runnable() {

            Rectangle slideCheckRectangle = new Rectangle(70, 5, 20, 110);

            @Override
            public void run() {
                prevSlideImage = null;
                boolean prevNotADifference = true;
                while (true) {
                    slideImage = robot.createScreenCapture(slideRectangle);
                    slideLabelImage = robot.createScreenCapture(slideRectangle);

                    Graphics g = slideLabelImage.getGraphics();
                    g.setColor(Color.RED);
                    g.drawRect(slideCheckRectangle.x, slideCheckRectangle.y, slideCheckRectangle.width, slideCheckRectangle.height);

                    if (prevSlideImage != null) {
                        boolean slideDifference = false;
                        for (int i = slideCheckRectangle.x; i < slideCheckRectangle.width + slideCheckRectangle.x && !slideDifference; i++) {
                            for (int j = slideCheckRectangle.y; j < slideCheckRectangle.height + slideCheckRectangle.y && !slideDifference; j++) {
                                if (isDifferent(slideImage.getRGB(i, j), prevSlideImage.getRGB(i, j))) {
                                    slideDifference = true;
                                }
                            }
                        }

                        if (slideDifference) {
                            if (prevNotADifference) {
                                newSlideTime = System.currentTimeMillis();

                                boolean switched = false;
                                try {
                                    if (!switched) {
                                        if (!cancelAutoSlideSwitch) {
                                            if (slideState.equals(SlideState.NO_SLIDE)) {
                                                boolean blank = false;
                                                int width = slideImage.getWidth();
                                                int height = slideImage.getHeight();
                                                for (BufferedImage blankSlide : blankSlides) {
                                                    boolean same = true;
                                                    for (int x = 0; x < width && same; x++) {
                                                        for (int y = 0; y < height && same; y++) {
                                                            same = blankSlide.getRGB(x, y) == slideImage.getRGB(x, y);
                                                        }
                                                    }
                                                    if (same) {
                                                        blank = true;
                                                        break;
                                                    }
                                                }

                                                if (!blank) {
                                                    fullSlidesButton.doClick();
                                                }
                                            }
                                        } else {
                                            slidesPanel.setOpaque(true);
                                        }
                                    }
                                } catch (Exception e) {
                                    e.printStackTrace();
                                }

                                prevNotADifference = false;

                            }
                        } else {
                            prevNotADifference = true;
                        }
                    }

                    fullSlidesButton.setIcon(new ImageIcon(slideLabelImage));
                    prevSlideImage = slideImage;
                    try {
                        Thread.sleep(500);
                    } catch (InterruptedException ex) {
                        ex.printStackTrace();
                    }
                }

            }
        }
        );
        slideThread.start();

        fadeLabel.setText(fadeSlider.getValue() + " ms");
        moveLabel.setText(moveSlider.getValue() + " ms");

        errorDialog.setLocation(getLocation());
        helperDialog.setLocation(getLocation());
        setSlideState(SlideState.NO_SLIDE);

        jLabel15.setText(firstSceneLabel.replaceAll(Pattern.quote("<%SCENE%>"), firstScene));
        setLocation(
                0, 515);
        setSize(
                new Dimension(1870, 560));
    }

    boolean inTransition = false;

    private void changeToScene(String scene, String transitionType) {
        if (currentScene.equals(scene)) {
            return;
        }
        int duration = 1000;
        if (transitionType == null) {
            transitionType = "Fade";
            try {
                if (currentScene.substring(0, currentScene.indexOf(" ")).equals(scene.substring(0, scene.indexOf(" ")))) {
                    transitionType = "Move";
                }
            } catch (Exception e) {
                System.out.println("Exception in changeToScene" + e.getMessage());
            }
        }

        if (transitionType.equals("Move")) {
            duration = moveSlider.getValue();
        } else if (transitionType.equals("Fade")) {
            duration = fadeSlider.getValue();
        }

        if (inTransition) {
            if ("Slides With Overlay".equals(scene) && !currentScene.contains("Slide")) {//TODO: Fix this, I'm not sure what it's doing.
                switchToSlides = true;
            } else {
                if (transitionType.equals("Fade")) {
                    controller.changeSceneWithTransition(scene, "Cut", callback);
                } else {
                    System.out.println("We're in transition. Do nothing");
                }
            }
        } else {
            if (setInTransition(true)) {
                controller.setTransitionDuration(duration, responseCallback);
                controller.changeSceneWithTransition(scene, transitionType, callback);
            }
        }
    }

    private synchronized boolean setInTransition(boolean b) {
        if (b == true && inTransition == true) {
            return false;
        }
        inTransition = b;
        return true;
    }
}
